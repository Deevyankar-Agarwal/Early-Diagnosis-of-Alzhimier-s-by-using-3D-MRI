{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"cUJl8Mw0QXoP"},"outputs":[],"source":["import torch\n","import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import roc_curve\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4301,"status":"ok","timestamp":1649910197696,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"NYznFz4FMRll","outputId":"10adce92-fd4c-4f26-d189-8ff94d389843"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting monai\n","  Downloading monai-0.8.1-202202162213-py3-none-any.whl (721 kB)\n","\u001b[K     |████████████████████████████████| 721 kB 5.0 MB/s \n","\u001b[?25hRequirement already satisfied: torch>=1.6 in /usr/local/lib/python3.7/dist-packages (from monai) (1.10.0+cu111)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from monai) (1.21.5)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch>=1.6->monai) (4.1.1)\n","Installing collected packages: monai\n","Successfully installed monai-0.8.1\n"]}],"source":["!pip install monai"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlUxE75HMNqI"},"outputs":[],"source":["import monai\n","from monai.data import decollate_batch\n","from monai.metrics import ROCAUCMetric\n","from monai.transforms import ToTensord,EnsureType,LoadImaged\n","from monai.transforms import RandAffined,RandRotated,RandGaussianNoised,Activations, AddChanneld, AsDiscrete, Compose,RandRotate90d, Resized, ScaleIntensityd, EnsureTyped"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"P0aSwEwmleyT"},"outputs":[],"source":["x=np.full(160,1) # 1 means AD 160 processes MRI for Training"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1693,"status":"ok","timestamp":1649910201596,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"_Via2mzzs85z","outputId":"af42e44a-15f2-44f6-efae-81e22cf7ecb4"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/\n"]}],"source":["train_files={}\n","for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/'):\n","  if files:\n","    print(path)    "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"92KqzjRQgnJX"},"outputs":[],"source":[" images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD', f]) for f in files] "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZIUb-4BxmS4J"},"outputs":[],"source":[" train_files = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1649910201598,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"2xRqG2ROpU2h","outputId":"8f86d0c3-9a10-4f48-f29a-6914c9ec2def"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/\n"]}],"source":["train_files_sMCI={}\n","for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/'):\n","  if files:\n","    print(path)\n","   "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9ezb_wKbpcLb"},"outputs":[],"source":["images_sMCI = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI', f]) for f in files]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o5Ic7GYbl99W"},"outputs":[],"source":["y=np.full(160,0) # o means stable MCI "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A2Wmvm0VqGvC"},"outputs":[],"source":["train_files_sMCI = [{\"img\": img, \"label\": label} for img, label in zip(images_sMCI, y)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nu56u0jmn99m"},"outputs":[],"source":["train_files.extend(train_files_sMCI)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":29,"status":"ok","timestamp":1649910201604,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"nXXjXi8moEfu","outputId":"58378c7c-0800-468a-9e7d-3df567d88fb9"},"outputs":[{"name":"stdout","output_type":"stream","text":["[{'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0266_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007095334102_S12381_I119390.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0266_MR_MPR__GradWarp__N3__Scaled_Br_20070819154701884_S12381_I68898.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0272_MR_MPR__GradWarp__N3__Scaled_Br_20070819160811308_S12394_I68927.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0310_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007095729372_S12468_I119395.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0310_MR_MPR__GradWarp__N3__Scaled_Br_20070819162315993_S12468_I68944.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0517_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007100124596_S15001_I119399.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0517_MR_MPR__GradWarp__N3__Scaled_Br_20070819165258579_S15001_I68976.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0528_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007100403336_S14629_I119401.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0528_MR_MPR__GradWarp__N3__Scaled_Br_20070821191602878_S14629_I69679.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0740_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007101045669_S17472_I119406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0740_MR_MPR__GradWarp__N3__Scaled_Br_20070819180306941_S17472_I69048.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_1409_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070821114304781_S33787_I69400.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_1430_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071030174634532_S39199_I79857.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_130_S_0956_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070210221002388_S20667_I39185.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_130_S_1201_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801182711594_S25082_I63757.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_130_S_1290_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801183629045_S26038_I63766.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_130_S_1337_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801184528226_S27584_I63775.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_131_S_0319_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070403131044669_S12322_I47984.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_131_S_0457_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080225093858034_S13976_I92406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_131_S_0497_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070403140455408_S15315_I48038.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_131_S_0691_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070403141449754_S17266_I48047.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_133_S_0493_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081007152542589_S14156_I119503.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_133_S_1055_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008100559240_S22386_I119646.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_133_S_1170_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008101107947_S24674_I119651.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_133_S_1170_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080207174424754_S24674_I89957.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0194_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008133147404_S13178_I119717.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0194_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070215183625381_S13178_I40239.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0299_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008133944436_S13839_I119726.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0299_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215202408595_S13839_I40312.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0300_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008134134874_S14136_I119728.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0300_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215205110923_S14136_I40328.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0426_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008134327484_S14581_I119730.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0426_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215211810806_S14581_I40356.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_0366_MR_MPR__GradWarp__N3__Scaled_Br_20070323161105797_S14199_I46608.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_0438_MR_MPR__GradWarp__N3__Scaled_Br_20070323162337393_S13764_I46615.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_0796_MR_MPR__GradWarp__N3__Scaled_Br_20080207175303986_S18077_I89979.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_0841_MR_MPR__GradWarp__N3__Scaled_Br_20070419175857278_S19351_I49776.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_1041_MR_MPR-R__GradWarp__N3__Scaled_Br_20070306190902216_S22310_I43071.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_141_S_0696_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071119104836717_S18373_I82738.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_141_S_0790_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080220165919265_S18766_I91253.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_012_S_0803_MR_MPR____N3__Scaled_2_Br_20081001123507114_S19197_I118716.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_012_S_0803_MR_MPR____N3__Scaled_Br_20070711172746366_S19197_I59250.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_0592_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071028192251104_S18419_I79144.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_0699_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070727182856171_S18366_I62650.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_0996_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426092308209_S22240_I51183.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_1161_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426171211057_S24399_I51485.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_1205_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426173828172_S25024_I51542.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070212231950856_S12402_I39620.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_014_S_1095_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070320181218511_S23323_I45740.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_016_S_0991_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070217023139686_S21737_I40794.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_016_S_1263_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070804134033886_S27303_I64622.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0286_MR_MPR____N3__Scaled_2_Br_20081001135113951_S12435_I118779.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0286_MR_MPR____N3__Scaled_Br_20070120013124801_S12435_I37007.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0335_MR_MPR____N3__Scaled_2_Br_20081008153133922_S14586_I119801.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0335_MR_MPR____N3__Scaled_Br_20070101214204431_S14586_I35009.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0633_MR_MPR-R____N3__Scaled_2_Br_20081010112443772_S15573_I120057.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0633_MR_MPR-R____N3__Scaled_Br_20070101222816515_S15573_I35036.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0682_MR_MPR____N3__Scaled_2_Br_20081008153234434_S16293_I119802.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0682_MR_MPR____N3__Scaled_Br_20070101224115510_S16293_I35044.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_020_S_0213_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070718120158728_S12386_I60600.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20061217125152228_S12836_I33444.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_021_S_0642_MR_MPR__GradWarp__N3__Scaled_Br_20061217130526879_S15935_I33452.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20061217132116005_S17580_I33461.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_021_S_1109_MR_MPR__GradWarp__N3__Scaled_Br_20070727185946236_S23446_I62695.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_022_S_0007_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712142439074_S9024_I59366.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712152611314_S11485_I59484.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_022_S_0219_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712154620604_S12375_I59533.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_022_S_0543_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712155153926_S14849_I59543.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0083_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001153941224_S10568_I118874.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0083_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061130194138457_S10568_I31143.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0084_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100834283_S10764_I118970.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0084_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20061201102044695_S10764_I31205.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0093_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100757991_S10736_I118969.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0139_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100910505_S11079_I118971.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0139_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061201144502375_S11079_I31300.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0916_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001154252419_S19228_I118879.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0916_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061203142844438_S19228_I31533.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001160410209_S26314_I118923.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070727133707675_S26314_I62433.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_1289_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001160534628_S26374_I118925.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_1289_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080207172946284_S26374_I89938.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_024_S_1171_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731172208570_S24659_I63406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_024_S_1307_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731173131780_S27061_I63415.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_0404_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061222194841960_S13866_I34204.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_0850_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070412191003564_S18554_I48996.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_1081_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070327152141858_S25357_I47168.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_1082_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070327161431010_S22938_I47204.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070327165452524_S25764_I47228.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_1385_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070330094058546_S28133_I47574.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_029_S_0836_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070806122937449_S18151_I65013.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_029_S_0999_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070805144703422_S23248_I64898.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070718151433161_S22977_I60741.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_029_S_1184_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070812143109046_S25463_I67210.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_031_S_0321_MR_MPR__GradWarp__N3__Scaled_Br_20070807093706127_S12365_I65383.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_031_S_0554_MR_MPR-R__GradWarp__N3__Scaled_Br_20070804144512116_S14904_I64711.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_031_S_1209_MR_MPR__GradWarp__N3__Scaled_Br_20070813153725713_S25028_I67441.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_0147_MR_MPR____N3__Scaled_2_Br_20081003100226549_S11186_I119079.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20070123192754258_S11186_I37210.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_0400_MR_MPR____N3__Scaled_2_Br_20081003101339687_S13238_I119087.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_0400_MR_MPR____N3__Scaled_Br_20070118000329335_S13238_I36459.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_1037_MR_MPR____N3__Scaled_2_Br_20081003104216708_S22208_I119114.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_1101_MR_MPR____N3__Scaled_2_Br_20081003104506735_S22783_I119116.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_1101_MR_MPR____N3__Scaled_Br_20070731180142730_S22783_I63442.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121149525_S17337_I119128.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070303125222238_S17337_I42400.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0733_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121546031_S16932_I119132.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0733_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070303133222445_S16932_I42425.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121834902_S16956_I119135.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070304110859078_S16956_I42441.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0889_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070426183239887_S19296_I51629.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_1281_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070517161803030_S26136_I54780.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070517162231894_S26144_I54785.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_1285_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426175923899_S26128_I51588.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_1308_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070517160021095_S26600_I54752.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_035_S_0341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070319175003745_S12952_I45213.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_036_S_0577_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070119233126708_S14974_I36914.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_036_S_0759_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070120004026768_S18094_I36969.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070209144410346_S18264_I38652.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_036_S_1001_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070209145840163_S22691_I38661.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_037_S_0627_MR_MPR__GradWarp__N3__Scaled_Br_20071030172722998_S16313_I79831.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_041_S_1368_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070806164945601_S27512_I65248.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_041_S_1391_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070730182830112_S29116_I62933.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_041_S_1435_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20071029192425510_S39186_I79636.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_051_S_1296_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070628165536504_S26431_I58022.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_053_S_1044_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003142251021_S21256_I119175.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_053_S_1044_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070802192148921_S21256_I64203.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_057_S_0474_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20061229153747701_S13990_I34720.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_057_S_1371_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070730190858034_S28667_I62998.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_057_S_1373_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070730191448410_S28698_I63008.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_057_S_1379_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070730191813596_S28761_I63014.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_062_S_0535_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070424112744977_S14699_I50426.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_062_S_0690_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070424115325478_S16924_I50468.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_062_S_0730_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070424120556863_S17062_I50487.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_062_S_0793_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070424123729148_S18189_I50524.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0029_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003155128312_S9904_I119180.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0029_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070209160613449_S9904_I38717.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0076_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003155813843_S10468_I119190.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0076_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070111012139914_S10468_I35911.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0110_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003160054331_S11177_I119194.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0828_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003161047536_S18532_I119205.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0828_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070807174227674_S18532_I65716.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_1185_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731111102788_S24635_I63104.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_1253_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070522143031075_S27558_I55033.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_068_S_0109_MR_MPR____N3__Scaled_2_Br_20081212141712788_S10772_I130231.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_068_S_0109_MR_MPR____N3__Scaled_Br_20070731181048264_S10772_I63454.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_068_S_1191_MR_MPR____N3__Scaled_Br_20071103125754305_S25451_I80645.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_073_S_0565_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081006105531714_S15762_I119234.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_073_S_0565_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070213213329963_S15762_I39919.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_082_S_0304_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081006113122746_S12557_I119236.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_082_S_0761_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081006113707423_S18119_I119244.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_082_S_1079_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070418082140556_S22650_I49490.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_082_S_1377_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070731115515322_S28495_I63170.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1027_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070418084102408_S21207_I49527.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1090_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731120023063_S23375_I63176.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1102_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731121241229_S22905_I63186.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1164_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070812144323362_S23871_I67223.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1397_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080307104443256_S31011_I95662.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1402_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070808191131320_S32102_I66078.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_098_S_0149_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080206083054086_S11021_I89429.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_098_S_0884_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070605153002130_S24183_I56026.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_052_S_4626_MR_MT1__GradWarp__N3m_Br_20120406134745265_S146349_I296423.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_031_S_4476_MR_MT1__N3m_Br_20120201114333350_S138754_I281842.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_036_S_0656_MR_MPR__GradWarp__B1_Correction__N3_Br_20070119234340991_S16286_I36923.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_031_S_0351_MR_MPR__GradWarp__N3_Br_20070807100037630_S13460_I65396.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_029_S_2376_MR_MT1__GradWarp__N3m_Br_20120808150736028_S140231_I322525.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_035_S_0033_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070319171138269_S10395_I45169.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_032_S_0718_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20081026162151955_S56614_I123878.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_033_S_1284_MR_MPR__GradWarp__B1_Correction__N3_Br_20070517163002017_S26686_I54798.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_036_S_0673_MR_MPR__GradWarp__B1_Correction__N3_Br_20070120001040042_S17157_I36948.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_031_S_4590_MR_MT1__N3m_Br_20120322172837106_S144046_I291927.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_029_S_1384_MR_MPR__GradWarp__B1_Correction__N3_Br_20070805145102556_S29082_I64902.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_012_S_4987_MR_MT1__N3m_Br_20121213150551136_S173242_I351339.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_021_S_0273_MR_MPR-R__GradWarp__N3_Br_20061217142914418_S12169_I33497.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_4966_MR_MT1__N3m_Br_20121016163944343_S170704_I340506.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_022_S_0961_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070712161347149_S20711_I59600.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_016_S_2031_MR_MT1__GradWarp__N3m_Br_20110308082338608_S99346_I222772.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_022_S_0004_MR_MPR__GradWarp__B1_Correction__N3_Br_20070804134258805_S9233_I64626.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_012_S_0634_MR_MPR____N3_Br_20100114155947906_S71018_I163688.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_029_S_1218_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070813144946904_S25477_I67393.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_012_S_4849_MR_MT1__N3m_Br_20130801183718097_S192305_I384088.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_018_S_4809_MR_MT1__N3m_Br_20120626164020476_S154963_I312863.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_007_S_4611_MR_MT1__GradWarp__N3m_Br_20120405104126984_S145205_I295877.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_002_S_0782_MR_MPR__GradWarp__B1_Correction__N3_Br_20070217003330133_S17835_I40716.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_006_S_4679_MR_MT1__N3m_Br_20121213154052681_S176759_I351387.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_007_S_4467_MR_MT1__GradWarp__N3m_Br_20120130094717221_S138180_I281397.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_005_S_0324_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20061212171807772_S12599_I32892.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_009_S_5000_MR_MT1__GradWarp__N3m_Br_20121205123642241_S172474_I349550.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_002_S_4447_MR_MT1__N3m_Br_20120521111700811_S148198_I305503.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_137_S_4536_MR_MT1__GradWarp__N3m_Br_20120308101908754_S141541_I288887.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_137_S_4299_MR_MT1__GradWarp__N3m_Br_20111108160313152_S127896_I265267.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_141_S_2333_MR_MT1__GradWarp__N3m_Br_20111008153347377_S122675_I260253.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_137_S_0800_MR_MPR__GradWarp__N3_Br_20070306181953188_S17822_I43033.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_137_S_1414_MR_MPR-R__GradWarp__N3_Br_20070922113057694_S36839_I74560.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_136_S_0107_MR_MPR__GradWarp__B1_Correction__N3_Br_20070215231412938_S11707_I40444.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_941_S_4036_MR_MT1__GradWarp__N3m_Br_20110524152255814_S109397_I236984.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_141_S_1378_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20080220172008524_S28926_I91308.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_141_S_1052_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070402174638512_S22922_I47726.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_141_S_4160_MR_MT1__GradWarp__N3m_Br_20110928090732094_S121753_I258664.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_135_S_4356_MR_MT1__GradWarp__N3m_Br_20111121111949549_S128879_I267753.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_135_S_4722_MR_MT1__GradWarp__N3m_Br_20120521161520372_S150596_I305615.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_130_S_4817_MR_MT1__N3m_Br_20120809141858031_S156603_I322951.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_135_S_4489_MR_MT1__GradWarp__N3m_Br_20120212191136852_S139411_I283942.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_135_S_4309_MR_MT1__GradWarp__N3m_Br_20111030175833673_S126435_I263754.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_130_S_4405_MR_MT1__N3m_Br_20120125125546237_S137367_I280550.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_130_S_4417_MR_MT1__N3m_Br_20120125131409065_S137433_I280572.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_135_S_4281_MR_MT1__GradWarp__N3m_Br_20111030164458283_S125351_I263683.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_135_S_4723_MR_MT1__GradWarp__N3m_Br_20120521161754452_S150582_I305621.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_130_S_2391_MR_MT1__N3m_Br_20120125132038603_S133690_I280580.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_128_S_0715_MR_MPR-R__GradWarp__N3_Br_20080207104831657_S16987_I89787.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_128_S_0200_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20080318144750476_S18927_I98870.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_129_S_4287_MR_MT1__GradWarp__N3m_Br_20111030172838553_S125945_I263726.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_130_S_0505_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070210232353031_S17291_I39234.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_128_S_2045_MR_MT1__GradWarp__N3m_Br_20120424140520790_S134312_I300262.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_128_S_4742_MR_MT1__GradWarp__N3m_Br_20120626142518996_S152151_I312658.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_127_S_4301_MR_MT1__GradWarp__N3m_Br_20111030174313463_S126224_I263740.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_129_S_1246_MR_MPR-R__GradWarp__N3_Br_20070821200112689_S26514_I69736.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_128_S_2220_MR_MT1__GradWarp__N3m_Br_20110310113450742_S96842_I223525.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_128_S_0770_MR_MPR-R__GradWarp__N3_Br_20070828145553713_S17429_I70862.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_126_S_0709_MR_MPR-R__GradWarp__B1_Correction_Br_20070209202341745_S17325_I38976.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_126_S_2407_MR_MT1__GradWarp__N3m_Br_20120629154745562_S151633_I313676.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_127_S_4210_MR_MT1__GradWarp__N3m_Br_20110910141826708_S121468_I255431.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_126_S_2405_MR_MT1__GradWarp__N3m_Br_20120521112730328_S148312_I305515.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_123_S_4170_MR_MT1__GradWarp__N3m_Br_20110906122701006_S120532_I254811.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_123_S_4127_MR_MT1__GradWarp__N3m_Br_20110816090718108_S117357_I250621.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_126_S_4896_MR_MT1__GradWarp__N3m_Br_20120828085114550_S160096_I326506.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_126_S_2360_MR_MT1__GradWarp__N3m_Br_20111216190951330_S130277_I272846.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_126_S_1187_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070412184413054_S25142_I48963.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_126_S_4514_MR_MT1__GradWarp__N3m_Br_20120216104047811_S140403_I285133.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_114_S_5047_MR_MT1__GradWarp__N3m_Br_20130313092855363_S183939_I362908.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_099_S_4205_MR_MT1__GradWarp__N3m_Br_20111015082201943_S124692_I261079.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_114_S_1118_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070419175538297_S23802_I49772.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_099_S_1034_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070403125208679_S21758_I47957.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_123_S_1300_MR_MPR____N3__Scaled_Br_20070809134209477_S27689_I66305.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_109_S_4380_MR_MT1__GradWarp__N3m_Br_20120109091019426_S135424_I276573.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_100_S_0296_MR_MPR____N3_Br_20091214142150532_S67603_I160870.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_114_S_2392_MR_MT1__GradWarp__N3m_Br_20120227123246523_S141141_I286648.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_109_S_2200_MR_MT1__GradWarp__N3m_Br_20110310092425329_S95177_I223482.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_123_S_2363_MR_MT1__GradWarp__N3m_Br_20120416131710652_S130016_I297591.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_073_S_2191_MR_MT1__GradWarp__N3m_Br_20120405190146021_S114075_I296337.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_073_S_4614_MR_MT1__GradWarp__N3m_Br_20120322173005753_S144053_I291929.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_082_S_2121_MR_MT1__GradWarp__N3m_Br_20110524152518970_S109355_I236988.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_073_S_4216_MR_MT1__GradWarp__N3m_Br_20110906123920455_S120793_I254822.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_098_S_2079_MR_MT1__GradWarp__N3m_Br_20110330133916097_S101840_I225424.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_073_S_2225_MR_MT1__GradWarp__N3m_Br_20110816094939060_S117924_I250655.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_073_S_2264_MR_MT1__GradWarp__N3m_Br_20110804072727719_S115755_I248640.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_094_S_2238_MR_MT1__GradWarp__N3m_Br_20110816094007204_S117425_I250645.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_098_S_2052_MR_MT1__GradWarp__N3m_Br_20110330133151519_S101955_I225422.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_099_S_0291_MR_MPR__GradWarp__B1_Correction__N3_Br_20061228141150177_S12065_I34523.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_072_S_2037_MR_MT1__GradWarp__N3m_Br_20110309100955306_S100019_I223249.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_072_S_2164_MR_MT1__GradWarp__N3m_Br_20110511153145581_S107939_I234641.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_068_S_2168_MR_MT1__GradWarp__N3m_Br_20120405184628180_S112655_I296323.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_073_S_2182_MR_MT1__GradWarp__N3m_Br_20120216105951294_S140093_I285151.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_068_S_4431_MR_MT1__GradWarp__N3m_Br_20120227123037012_S139909_I286646.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_072_S_2116_MR_MT1__GradWarp__N3m_Br_20110504104730615_S105119_I232859.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_073_S_0746_MR_MPR__GradWarp__B1_Correction__N3_Br_20070731112157142_S23285_I63117.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_072_S_2072_MR_MT1__GradWarp__N3m_Br_20110331135217019_S102455_I225564.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_072_S_2093_MR_MT1__GradWarp__N3m_Br_20110427150449440_S104401_I229290.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_072_S_4063_MR_MT1__GradWarp__N3m_Br_20110623113553803_S112302_I241403.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_052_S_4944_MR_MT1__GradWarp__N3m_Br_20121211123518900_S171597_I350690.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_053_S_0919_MR_MPR-R__GradWarp__B1_Correction_Br_20070807172214763_S20422_I65690.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_052_S_0989_MR_MPR__GradWarp__B1_Correction__N3_Br_20070802185834638_S22476_I64178.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_052_S_2249_MR_MT1__GradWarp__N3m_Br_20110715130616290_S114222_I244945.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_067_S_2196_MR_MT1__GradWarp__N3m_Br_20110623110504418_S110848_I241362.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_053_S_2396_MR_MT1__N3m_Br_20120216105823309_S140046_I285149.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_053_S_2357_MR_MT1__N3m_Br_20111216182408911_S127922_I272802.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_053_S_4557_MR_MT1__N3m_Br_20120319155645998_S143365_I291000.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_057_S_1269_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070818134602732_S25879_I68549.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_068_S_0802_MR_MT1__GradWarp__N3m_Br_20150618232937107_S259814_I498019.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_037_S_0377_MR_MPR__GradWarp__N3_Br_20071125141317504_S13873_I83093.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_029_S_2395_MR_MT1__GradWarp__N3m_Br_20140529174354404_S141416_I427978.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_041_S_4510_MR_MT1__GradWarp__N3m_Br_20120217143926674_S140538_I285452.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_041_S_4876_MR_MT1__GradWarp__N3m_Br_20120828112536527_S161044_I326580.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_041_S_1418_MR_MPR__GradWarp__B1_Correction__N3_Br_20070918131937079_S36523_I73637.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_037_S_4302_MR_MT1__GradWarp__N3m_Br_20111030175629148_S126426_I263752.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_032_S_2119_MR_MT1__GradWarp__N3m_Br_20110505162723467_S107270_I233454.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_032_S_2247_MR_MT1__GradWarp__N3m_Br_20110906115344208_S119042_I254762.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_031_S_0867_MR_MPR__GradWarp__N3_Br_20070813150816080_S19256_I67404.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_035_S_2061_MR_MT1__GradWarp__N3m_Br_20110427152327109_S103446_I229323.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_1045_MR_MPR__GradWarp__B1_Correction__N3_Br_20070327162204232_S22174_I47208.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_4869_MR_MT1__GradWarp__N3m_Br_20120828114122398_S161647_I326588.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_0644_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20061222205427190_S15629_I34244.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_4926_MR_MT1__GradWarp__N3m_Br_20121001155716610_S168358_I337590.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_4919_MR_MT1__GradWarp__N3m_Br_20120906180653403_S165966_I331861.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_2245_MR_MT1__GradWarp__N3m_Br_20110623111201575_S110929_I241368.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_2336_MR_MT1__GradWarp__N3m_Br_20111216172943468_S126509_I272756.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_4804_MR_MT1__GradWarp__N3m_Br_20120803102155838_S157713_I321468.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_2219_MR_MT1__GradWarp__N3m_Br_20110518135722544_S108539_I235644.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_2183_MR_MT1__GradWarp__N3m_Br_20110701093610676_S112031_I242882.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_023_S_1046_MR_MPR__GradWarp__B1_Correction__N3_Br_20070322174209790_S22198_I46391.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_024_S_2239_MR_MT1__GradWarp__N3m_Br_20110906123407613_S119991_I254817.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_021_S_4744_MR_MT1__GradWarp__N3m_Br_20120626141903703_S152118_I312652.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_022_S_2167_MR_MT1__GradWarp__N3m_Br_20120405181622014_S113063_I296284.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_024_S_4674_MR_MT1__GradWarp__N3m_Br_20120427160701204_S148018_I300950.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_022_S_5004_MR_MT1__GradWarp__N3m_Br_20121206113721331_S173866_I349822.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_0116_MR_MPR__GradWarp__B1_Correction__N3_Br_20061227120952225_S11442_I34324.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_023_S_2068_MR_MT1__GradWarp__N3m_Br_20110505163252371_S107293_I233459.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_024_S_4169_MR_MT1__GradWarp__N3m_Br_20110906114320314_S118604_I254748.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_027_S_0307_MR_MPR__GradWarp__B1_Correction__N3_Br_20061222183740799_S13072_I34158.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_011_S_4235_MR_MT1__GradWarp__N3m_Br_20120420150440356_S147089_I299290.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_018_S_2155_MR_MT1__N3m_Br_20110804070333439_S113705_I248622.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_021_S_2100_MR_MT1__GradWarp__N3m_Br_20110308084842759_S97611_I222789.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_018_S_4868_MR_MT1__N3m_Br_20120802162007239_S158867_I321264.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_014_S_0169_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070217040821717_S11565_I40857.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_014_S_0557_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070213005753330_S15093_I39678.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_019_S_4548_MR_MT1__N3m_Br_20120308101327821_S141731_I288881.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_021_S_2124_MR_MT1__GradWarp__N3m_Br_20110511154548702_S107691_I234662.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_014_S_2308_MR_MT1__GradWarp__N3m_Br_20110307162409539_S100040_I222751.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_018_S_4889_MR_MT1__N3m_Br_20120828094053789_S160587_I326531.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_005_S_0546_MR_MPR__GradWarp__B1_Correction__N3_Br_20061212095514026_S15567_I32649.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_007_S_4272_MR_MT1__GradWarp__N3m_Br_20111030163951005_S125493_I263678.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_002_S_4473_MR_MT1__N3m_Br_20120216103716360_S140453_I285129.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_003_S_1122_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070501173216011_S23541_I52807.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_003_S_2374_MR_MT1__GradWarp__N3m_Br_20110518135111696_S108554_I235638.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_005_S_4185_MR_MT1__GradWarp__N3m_Br_20110928082513800_S121795_I258625.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_002_S_4654_MR_MT1__N3m_Br_20120411163810431_S146577_I297035.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_003_S_0908_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070727175311471_S32515_I62594.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_007_S_2394_MR_MT1__GradWarp__N3m_Br_20120221112522269_S140365_I285919.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_005_S_2390_MR_MT1__GradWarp__N3m_Br_20120212192048004_S139572_I283950.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_002_S_1155_MR_MPR__GradWarp__B1_Correction__N3_Br_20070217034739048_S24144_I40844.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/SMCI/ADNI_002_S_4229_MR_MT1__N3m_Br_20111008150426985_S123034_I260229.nii', 'label': 0}]\n"]}],"source":["print(train_files)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_-tQmulsLAFi"},"outputs":[],"source":["  train_transforms = Compose(\n","        [\n","            LoadImaged(keys=[\"img\"]),\n","            #AddChanneld(keys=[\"img\"]),\n","            #RandAffined(keys=['img'], prob=0.5, translate_range=10), \n","            #RandRotated(keys=['img'], prob=0.6, range_x=10.0),\n","            #RandGaussianNoised(keys='img', prob=0.5),\n","            #ToTensord(keys=[\"img\"]),\n","        ]\n","    )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w2dtOA-uRVYG"},"outputs":[],"source":["post_pred = Compose([EnsureType(), Activations(softmax=True)])\n","post_label = Compose([EnsureType(), AsDiscrete(to_onehot=2)])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LwPcqiDsUBkD"},"outputs":[],"source":["from torch.utils.data import DataLoader\n","from torch.utils.tensorboard import SummaryWriter"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N4Mqm0grS1EO"},"outputs":[],"source":["#check_ds = monai.data.Dataset(data=train_files, transform=train_transforms)\n","#check_loader = DataLoader(check_ds, batch_size=4, num_workers=4, pin_memory=torch.cuda.is_available())\n","#check_data = monai.utils.misc.first(check_loader)\n","#print(check_data[\"img\"].shape, check_data[\"label\"])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iVsZ9Mx6oeN7"},"outputs":[],"source":["# create a training data loader\n","train_ds = monai.data.Dataset(data=train_files, transform=train_transforms)\n","train_loader = DataLoader(train_ds, batch_size=2, shuffle=True, num_workers=4, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":614,"status":"ok","timestamp":1649910202203,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"coRjr9lk0pip","outputId":"f44b6251-e127-427e-fa9f-0553927e7eaf"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/AD/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/AD/'):\n","  if files:\n","    print(path)    "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Bb1UmOqp2Mzo"},"outputs":[],"source":["x=np.full(40,1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U1t6ApKc3z3C"},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/AD', f]) for f in files] "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cZFZIBmE4diO"},"outputs":[],"source":["valid_files = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1649910202205,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"j3ruNdWQ6efP","outputId":"1202fe0e-c361-45eb-fe0e-959a1005f10d"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/SMCI/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/SMCI/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iRBh68RFSxCP"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CPeztrsB6k-V"},"outputs":[],"source":["x=np.full(40,0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zwshfucp6pey"},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/SMCI', f]) for f in files] "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tTnjUbZW6yuZ"},"outputs":[],"source":["valid_files_sMCI = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZxDNtMH97eOE"},"outputs":[],"source":["valid_files.extend(valid_files_sMCI)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U5VuoLnM7pfM"},"outputs":[],"source":["#check_ds = monai.data.Dataset(data=valid_files, transform=train_transforms)\n","#check_loader = DataLoader(check_ds, batch_size=8, num_workers=4, pin_memory=torch.cuda.is_available())\n","#check_data = monai.utils.misc.first(check_loader)\n","#print(check_data[\"img\"].shape, check_data[\"label\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qVKSOKbw7296"},"outputs":[],"source":["# create a validation data loader\n","valid_ds = monai.data.Dataset(data=valid_files, transform=train_transforms)\n","valid_loader = DataLoader(valid_ds, batch_size=2,shuffle=True,num_workers=4, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":780,"status":"ok","timestamp":1649910202976,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"w59RYjFHM4s9","outputId":"53f091c6-7ed9-468c-e627-d9f98a89a2a0"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PxrcqmvMNAi9"},"outputs":[],"source":["x=np.full(29,1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"50fO8lN-NNXk"},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29', f]) for f in files] "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52,"status":"ok","timestamp":1649910202980,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"BhuE2IwePDBJ","outputId":"f9a7536f-02dc-417d-e66e-a95c9428b6dc"},"outputs":[{"name":"stdout","output_type":"stream","text":["['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_002_S_0938_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081104151647760_S58211_I125155.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_002_S_1018_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081224104711856_S60832_I132197.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_005_S_0221_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080501163219594_S49279_I104489.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_005_S_1341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090701135215664_S65452_I147406.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_007_S_1339_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721101114129_S67376_I149749.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_010_S_0786_MR_MPR____N3__Scaled_Br_20100105142259322_S58426_I162100.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_010_S_0829_MR_MPR____N3__Scaled_Br_20090227152103934_S62987_I137223.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080516095357795_S49746_I105878.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_016_S_0991_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721103719643_S66595_I149771.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20080515114721734_S49511_I105737.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20090127130302490_S57137_I134624.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080229153509900_S45881_I94405.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_023_S_0084_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080224132527438_S44784_I92169.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090512151630340_S64537_I143676.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_027_S_1082_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081229144920056_S60862_I132368.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090316152042654_S63689_I139062.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090223154912775_S61415_I136737.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20080421171040104_S47745_I103333.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081023111433234_S55321_I123024.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081026130730923_S56031_I123722.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317134835050_S63547_I139235.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_1308_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317140629096_S63613_I139266.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081028132916623_S57028_I124258.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_041_S_1368_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090513123110219_S64654_I143723.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_057_S_1371_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514101747514_S66427_I143792.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_057_S_1379_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514103130382_S66419_I143815.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0535_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080702154348870_S51763_I112301.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0730_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081023151703543_S54793_I123220.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0793_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081230153105872_S60719_I132424.nii']\n"]}],"source":["print(images)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UbezDmYZNdU-"},"outputs":[],"source":["test_files= [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1649910202981,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"bBuIqGtpnS8V","outputId":"40b6ac76-b08e-4324-899d-de631383f063"},"outputs":[{"data":{"text/plain":["[{'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_002_S_0938_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081104151647760_S58211_I125155.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_002_S_1018_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081224104711856_S60832_I132197.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_005_S_0221_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080501163219594_S49279_I104489.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_005_S_1341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090701135215664_S65452_I147406.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_007_S_1339_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721101114129_S67376_I149749.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_010_S_0786_MR_MPR____N3__Scaled_Br_20100105142259322_S58426_I162100.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_010_S_0829_MR_MPR____N3__Scaled_Br_20090227152103934_S62987_I137223.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080516095357795_S49746_I105878.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_016_S_0991_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721103719643_S66595_I149771.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20080515114721734_S49511_I105737.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20090127130302490_S57137_I134624.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080229153509900_S45881_I94405.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_023_S_0084_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080224132527438_S44784_I92169.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090512151630340_S64537_I143676.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_027_S_1082_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081229144920056_S60862_I132368.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090316152042654_S63689_I139062.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090223154912775_S61415_I136737.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20080421171040104_S47745_I103333.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081023111433234_S55321_I123024.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081026130730923_S56031_I123722.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317134835050_S63547_I139235.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_1308_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317140629096_S63613_I139266.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081028132916623_S57028_I124258.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_041_S_1368_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090513123110219_S64654_I143723.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_057_S_1371_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514101747514_S66427_I143792.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_057_S_1379_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514103130382_S66419_I143815.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0535_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080702154348870_S51763_I112301.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0730_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081023151703543_S54793_I123220.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0793_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081230153105872_S60719_I132424.nii',\n","  'label': 1}]"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["test_files"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1649910202981,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"BTX-NshNN67U","outputId":"7fbd1025-c493-4e3b-ded2-e1e56f31ca02"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V3Mx0BFpOgxK"},"outputs":[],"source":["x=np.full(29,0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WNTSkpIjOj2w"},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI', f]) for f in files] "]},{"cell_type":"markdown","metadata":{"id":"vTGEiVvEJADY"},"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1649910202984,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"Ozj2euWTPdpY","outputId":"c625564e-f4ba-4237-ab0d-f513c6cdf577"},"outputs":[{"name":"stdout","output_type":"stream","text":["['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_137_S_0158_MR_MPR-R__GradWarp__N3_Br_20070321171006007_S11647_I45874.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_137_S_0481_MR_MPR-R__GradWarp__N3_Br_20070327121645055_S14293_I47057.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_137_S_4678_MR_MT1__GradWarp__N3m_Br_20120521101224968_S149048_I305449.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_133_S_1031_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070213234237752_S21551_I40023.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_941_S_4764_MR_MT1__GradWarp__N3m_Br_20120626140700552_S152506_I312638.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_136_S_1227_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070801195111849_S26398_I63842.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_133_S_0912_MR_MPR__GradWarp__B1_Correction__N3_Br_20070213230413512_S19884_I39999.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_141_S_0851_MR_MPR__GradWarp__B1_Correction__N3_Br_20070403112630435_S19364_I47869.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_153_S_4838_MR_MT1__GradWarp__N3m_Br_20120809145424299_S157969_I323002.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_153_S_4621_MR_MT1__GradWarp__N3m_Br_20120405104451820_S144994_I295881.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_4553_MR_MT1__GradWarp__N3m_Br_20120227121945054_S141277_I286635.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_130_S_0449_MR_MPR__GradWarp__B1_Correction__N3_Br_20081016170726910_S15123_I121507.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_133_S_0792_MR_MPR__GradWarp__B1_Correction__N3_Br_20070809144104560_S18306_I66371.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_4571_MR_MT1__GradWarp__N3m_Br_20120319143204480_S143575_I290959.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_130_S_0102_MR_MPR__GradWarp__B1_Correction__N3_Br_20070212203515208_S10746_I39459.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_133_S_0771_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20080224144832352_S18575_I92285.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_130_S_0783_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070210233557237_S18022_I39251.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_5066_MR_MT1__GradWarp__N3m_Br_20130208125517584_S181649_I358509.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_4653_MR_MT1__GradWarp__N3m_Br_20120424135432430_S147791_I300250.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_4636_MR_MT1__GradWarp__N3m_Br_20120405102704694_S144951_I295861.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_127_S_1140_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070731210730314_S24277_I63641.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_0608_MR_MPR__GradWarp__N3_Br_20070819173116210_S15211_I69015.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_123_S_4806_MR_MT1__GradWarp__N3m_Br_20120626163302938_S154998_I312849.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_1088_MR_MPR__GradWarp__B1_Correction__N3_Br_20070819183840416_S23786_I69099.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_116_S_4635_MR_MT1__GradWarp__N3m_Br_20121025150702194_S159504_I342605.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_2123_MR_MT1__GradWarp__N3m_Br_20120416132356262_S134342_I297597.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_0225_MR_MPR-R__GradWarp__N3_Br_20070819150427437_S11678_I68845.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_1408_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070820165411633_S36472_I69288.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_116_S_4898_MR_MT1__GradWarp__N3m_Br_20120828085908613_S160168_I326508.nii']\n"]}],"source":["print(images)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l-fmwiL9Pmdt"},"outputs":[],"source":["test_files_sMCI= [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OU_zrGhaPwJF"},"outputs":[],"source":["test_files.extend(test_files_sMCI)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BSkM4T7KP_9_"},"outputs":[],"source":["# create a test data loader\n","test_ds = monai.data.Dataset(data=test_files, transform=train_transforms)\n","test_loader = DataLoader(test_ds, batch_size=1, shuffle=True, num_workers=1, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0jRFNQcxJUOf"},"outputs":[],"source":["  #from monai.networks.nets.efficientnet import EfficientNetBN\n","  device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","  #model=EfficientNetBN(\"efficientnet-b1\",spatial_dims=3, in_channels=1, num_classes=2).to(device)\n","  model = monai.networks.nets.DenseNet121(spatial_dims=3, in_channels=1, out_channels=2).to(device)\n","  loss_function = torch.nn.CrossEntropyLoss()\n","  optimizer = torch.optim.Adam(model.parameters(), 1e-4)\n","  auc_metric = ROCAUCMetric()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1649910213463,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"rfTuqU6DJbqG","outputId":"43d6ae89-c9f8-454b-d5e4-1eeda786785d"},"outputs":[{"name":"stdout","output_type":"stream","text":["<bound method Module.parameters of DenseNet121(\n","  (features): Sequential(\n","    (conv0): Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n","    (norm0): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu0): ReLU(inplace=True)\n","    (pool0): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","    (denseblock1): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(96, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition1): _Transition(\n","      (norm): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock2): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition2): _Transition(\n","      (norm): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(512, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock3): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer17): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer18): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer19): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer20): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer21): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer22): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer23): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer24): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition3): _Transition(\n","      (norm): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(1024, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock4): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (norm5): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (class_layers): Sequential(\n","    (relu): ReLU(inplace=True)\n","    (pool): AdaptiveAvgPool3d(output_size=1)\n","    (flatten): Flatten(start_dim=1, end_dim=-1)\n","    (out): Linear(in_features=1024, out_features=2, bias=True)\n","  )\n",")>\n"]}],"source":["print(model.parameters)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"Ve31g7LaVSGl","outputId":"b72e4da1-69bb-41ae-c349-7cb4dd655e7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["----------\n","epoch 1 average loss: 0.7412\n","----------\n","epoch 2 average loss: 0.6871\n","saved new best metric model\n","current epoch: 2 current accuracy: 0.5000 current AUC: 0.5825 best accuracy: 0.5000 at epoch 2\n","----------\n","epoch 3 average loss: 0.6987\n","----------\n","epoch 4 average loss: 0.6754\n","saved new best metric model\n","current epoch: 4 current accuracy: 0.5250 current AUC: 0.7669 best accuracy: 0.5250 at epoch 4\n","----------\n","epoch 5 average loss: 0.6060\n","----------\n","epoch 6 average loss: 0.5936\n","current epoch: 6 current accuracy: 0.4375 current AUC: 0.3406 best accuracy: 0.5250 at epoch 4\n","----------\n","epoch 7 average loss: 0.5486\n","----------\n","epoch 8 average loss: 0.4923\n","saved new best metric model\n","current epoch: 8 current accuracy: 0.6000 current AUC: 0.7400 best accuracy: 0.6000 at epoch 8\n","----------\n","epoch 9 average loss: 0.5035\n","----------\n","epoch 10 average loss: 0.4516\n","saved new best metric model\n","current epoch: 10 current accuracy: 0.8125 current AUC: 0.8994 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 11 average loss: 0.4180\n","----------\n","epoch 12 average loss: 0.4227\n","current epoch: 12 current accuracy: 0.7000 current AUC: 0.8325 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 13 average loss: 0.3672\n","----------\n","epoch 14 average loss: 0.3535\n","current epoch: 14 current accuracy: 0.8000 current AUC: 0.9038 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 15 average loss: 0.3559\n","----------\n","epoch 16 average loss: 0.3246\n","current epoch: 16 current accuracy: 0.7000 current AUC: 0.8869 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 17 average loss: 0.3376\n","----------\n","epoch 18 average loss: 0.3063\n","current epoch: 18 current accuracy: 0.6625 current AUC: 0.8681 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 19 average loss: 0.2399\n","----------\n","epoch 20 average loss: 0.3635\n","current epoch: 20 current accuracy: 0.7625 current AUC: 0.8287 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 21 average loss: 0.2548\n","----------\n","epoch 22 average loss: 0.2598\n","current epoch: 22 current accuracy: 0.7875 current AUC: 0.8488 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 23 average loss: 0.2081\n","----------\n","epoch 24 average loss: 0.2375\n","current epoch: 24 current accuracy: 0.5250 current AUC: 0.8869 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 25 average loss: 0.2049\n","----------\n","epoch 26 average loss: 0.2043\n","current epoch: 26 current accuracy: 0.6625 current AUC: 0.8512 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 27 average loss: 0.1933\n","----------\n","epoch 28 average loss: 0.2189\n","current epoch: 28 current accuracy: 0.7875 current AUC: 0.8881 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 29 average loss: 0.1298\n","----------\n","epoch 30 average loss: 0.1364\n","current epoch: 30 current accuracy: 0.6500 current AUC: 0.8769 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 31 average loss: 0.1711\n","----------\n","epoch 32 average loss: 0.1450\n","current epoch: 32 current accuracy: 0.7875 current AUC: 0.8588 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 33 average loss: 0.1583\n","----------\n","epoch 34 average loss: 0.0994\n","current epoch: 34 current accuracy: 0.5875 current AUC: 0.8512 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 35 average loss: 0.2118\n","----------\n","epoch 36 average loss: 0.1035\n","current epoch: 36 current accuracy: 0.5250 current AUC: 0.8131 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 37 average loss: 0.0887\n","----------\n","epoch 38 average loss: 0.0738\n","current epoch: 38 current accuracy: 0.7500 current AUC: 0.8631 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 39 average loss: 0.0364\n","----------\n","epoch 40 average loss: 0.1105\n","current epoch: 40 current accuracy: 0.7625 current AUC: 0.8287 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 41 average loss: 0.0580\n","----------\n","epoch 42 average loss: 0.0937\n","current epoch: 42 current accuracy: 0.7750 current AUC: 0.8875 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 43 average loss: 0.0731\n","----------\n","epoch 44 average loss: 0.1291\n","current epoch: 44 current accuracy: 0.8000 current AUC: 0.9000 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 45 average loss: 0.0907\n","----------\n","epoch 46 average loss: 0.1072\n","current epoch: 46 current accuracy: 0.5875 current AUC: 0.8775 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 47 average loss: 0.0686\n","----------\n","epoch 48 average loss: 0.0402\n","current epoch: 48 current accuracy: 0.6875 current AUC: 0.8769 best accuracy: 0.8125 at epoch 10\n","----------\n","epoch 49 average loss: 0.0350\n","----------\n","epoch 50 average loss: 0.1598\n","current epoch: 50 current accuracy: 0.6375 current AUC: 0.9025 best accuracy: 0.8125 at epoch 10\n","train completed, best_metric: 0.8125 at epoch: 10\n","              precision    recall  f1-score   support\n","\n","        SMCI     0.8049    0.8250    0.8148        40\n","          AD     0.8205    0.8000    0.8101        40\n","\n","    accuracy                         0.8125        80\n","   macro avg     0.8127    0.8125    0.8125        80\n","weighted avg     0.8127    0.8125    0.8125        80\n","\n"]}],"source":["# start a typical PyTorch training\n","val_interval = 2\n","best_metric = -1\n","best_metric_epoch = -1\n","writer = SummaryWriter()\n","for epoch in range(50):\n","    print(\"-\" * 10)\n","    #print(f\"epoch {epoch + 1}/{5}\")\n","    model.train()\n","    epoch_loss = 0\n","    step = 0\n","    for batch_data in train_loader:\n","        step += 1\n","        inputs, labels = batch_data[\"img\"].to(device), batch_data[\"label\"].to(device)\n","        optimizer.zero_grad()\n","        outputs = model(inputs.unsqueeze(1))\n","        loss = loss_function(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","        epoch_loss += loss.item()\n","        epoch_len = len(train_ds) // train_loader.batch_size\n","        #print(f\"{step}/{epoch_len}, train_loss: {loss.item():.4f}\")\n","        writer.add_scalar(\"train_loss\", loss.item(), epoch_len * epoch + step)\n","    epoch_loss /= step\n","    print(f\"epoch {epoch + 1} average loss: {epoch_loss:.4f}\")\n","    #epoch_loss_values.append(epoch_loss)\n","    \n","    if (epoch + 1) % val_interval == 0:\n","        model.eval()\n","        with torch.no_grad():\n","            y_pred = torch.tensor([], dtype=torch.float32, device=device)\n","            y = torch.tensor([], dtype=torch.long, device=device)\n","            for val_data in valid_loader:\n","                val_images, val_labels = val_data[\"img\"].to(device), val_data[\"label\"].to(device)\n","                y_pred = torch.cat([y_pred, model(val_images.unsqueeze(1))], dim=0)\n","                y = torch.cat([y, val_labels], dim=0)\n","\n","            acc_value = torch.eq(y_pred.argmax(dim=1), y)\n","            acc_metric = acc_value.sum().item() / len(acc_value)\n","            y_onehot = [post_label(i) for i in decollate_batch(y)]\n","            y_pred_act = [post_pred(i) for i in decollate_batch(y_pred)]\n","            auc_metric(y_pred_act, y_onehot)\n","            auc_result = auc_metric.aggregate()\n","            auc_metric.reset()\n","            del y_pred_act, y_onehot\n","            if acc_metric > best_metric:\n","                A=y\n","                B=y_pred.argmax(dim=1)\n","                best_metric = acc_metric\n","                best_metric_epoch = epoch + 1\n","                torch.save(model.state_dict(), \"/content/drive/MyDrive/F3DENSENET121SMCIvsADbest_metric_model_classification3d_dict.pth\")\n","                print(\"saved new best metric model\")\n","            print(\n","                \"current epoch: {} current accuracy: {:.4f} current AUC: {:.4f} best accuracy: {:.4f} at epoch {}\".format(\n","                    epoch + 1, acc_metric, auc_result, best_metric, best_metric_epoch\n","                )\n","            )\n","            writer.add_scalar(\"val_accuracy\", acc_metric, epoch + 1)\n","print(f\"train completed, best_metric: {best_metric:.4f} at epoch: {best_metric_epoch}\")\n","target_names = [\"SMCI\",\"AD\"]\n","print(classification_report(A.cpu(),B.cpu() ,target_names=target_names,digits=4))\n","writer.close()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"mpDXFptC5nzb","outputId":"5e01e137-9073-4cb6-c2dd-4f22fdf1038b"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","        SMCI     0.8049    0.8250    0.8148        40\n","          AD     0.8205    0.8000    0.8101        40\n","\n","    accuracy                         0.8125        80\n","   macro avg     0.8127    0.8125    0.8125        80\n","weighted avg     0.8127    0.8125    0.8125        80\n","\n"]}],"source":["target_names = [\"SMCI\",\"AD\"]\n","print(classification_report(A.cpu(),B.cpu() ,target_names=target_names,digits=4))\n","writer.close()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"3ZhBVE_wAU9P","outputId":"f7a3b73d-1648-4c3c-c1e3-02106fdab682"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["fpr, tpr, _ = roc_curve(A.cpu(), B.cpu())\n","roc_auc = roc_auc_score(A.cpu(), B.cpu())\n","\n","plt.figure(1)\n","plt.plot([0, 1], [0, 1])\n","plt.plot(fpr, tpr, label=\"(Densenet area = {:.3f})\".format(roc_auc))\n","plt.xlabel(\"False positive rate\")\n","plt.ylabel(\"True positive rate\")\n","plt.title(\"ROC curve\")\n","plt.legend(loc=\"best\")\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"19uw8D1vA4cn","outputId":"bda9c2af-5a69-46c3-c081-095e66ce620a"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["cmat = confusion_matrix(A.cpu(),B.cpu())\n","\n","ax = sns.heatmap(cmat, annot=True, cmap='Blues')\n","\n","ax.set_title('Confusion Matrix Stable MCI-29[Label 0],AD-29[Label 1] \\n\\n');\n","ax.set_xlabel('\\nPredicted Values')\n","ax.set_ylabel('Actual Values ');\n","\n","## Ticket labels - List must be in alphabetical order\n","ax.xaxis.set_ticklabels(['False','True'])\n","ax.yaxis.set_ticklabels(['False','True'])\n","\n","## Display the visualization of the Confusion Matrix.\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"1LD5Doaqqonh","outputId":"16edf375-f419-4329-a6c1-a601304f95af"},"outputs":[{"name":"stdout","output_type":"stream","text":["Thu Apr 14 06:33:42 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   70C    P0    50W / 250W |   9173MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"pn5KWnRv7nhh","outputId":"045372ab-5127-4cdf-edfd-c9945c4cf369"},"outputs":[{"data":{"text/plain":["DenseNet121(\n","  (features): Sequential(\n","    (conv0): Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n","    (norm0): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu0): ReLU(inplace=True)\n","    (pool0): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","    (denseblock1): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(96, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition1): _Transition(\n","      (norm): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock2): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition2): _Transition(\n","      (norm): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(512, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock3): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer17): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer18): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer19): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer20): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer21): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer22): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer23): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer24): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition3): _Transition(\n","      (norm): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(1024, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock4): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (norm5): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (class_layers): Sequential(\n","    (relu): ReLU(inplace=True)\n","    (pool): AdaptiveAvgPool3d(output_size=1)\n","    (flatten): Flatten(start_dim=1, end_dim=-1)\n","    (out): Linear(in_features=1024, out_features=2, bias=True)\n","  )\n",")"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["model.load_state_dict(torch.load('/content/drive/MyDrive/F3DENSENET121SMCIvsADbest_metric_model_classification3d_dict.pth'))\n","model.eval()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"KW5rFKe3eOHg"},"outputs":[],"source":["y_true = list()\n","y_pred = list()\n","\n","with torch.no_grad():\n","    for test_data in test_loader:\n","        test_images, test_labels = test_data[\"img\"].to(device), test_data[\"label\"].to(device)\n","        pred = model(test_images.unsqueeze(1)).argmax(dim=1)\n","        y_true.append(test_labels.item())\n","        y_pred.append(pred.item())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"tOKuCe3dg9T4","outputId":"26334e81-afb0-4051-f2a8-e870fe5d21f3"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","        SMCI     0.8276    0.8276    0.8276        29\n","          AD     0.8276    0.8276    0.8276        29\n","\n","    accuracy                         0.8276        58\n","   macro avg     0.8276    0.8276    0.8276        58\n","weighted avg     0.8276    0.8276    0.8276        58\n","\n"]}],"source":["from sklearn.metrics import classification_report\n","target_names = [\"SMCI\",\"AD\"]\n","print(classification_report(y_true, y_pred,target_names=target_names,digits=4))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"DvQSxBgIhIrO","outputId":"2688e0d7-3d08-496c-bd9b-d4e3e4cf1a48"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["fpr, tpr, _ = roc_curve(y_true, y_pred)\n","roc_auc = roc_auc_score(y_true, y_pred)\n","\n","plt.figure(1)\n","plt.plot([0, 1], [0, 1])\n","plt.plot(fpr, tpr, label=\"(Densenet121 area = {:.3f})\".format(roc_auc))\n","plt.xlabel(\"False positive rate\")\n","plt.ylabel(\"True positive rate\")\n","plt.title(\"ROC curve\")\n","plt.legend(loc=\"best\")\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"_Abw0aPbosFy","outputId":"afaa3621-0664-41c2-d2de-0171e9a546af"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["cmat = confusion_matrix(y_true, y_pred)\n","\n","import seaborn as sns\n","\n","ax = sns.heatmap(cmat, annot=True, cmap='Blues')\n","\n","ax.set_title('Confusion Matrix Stable MCI-29[Label 0],AD-29[Label 1] \\n\\n');\n","ax.set_xlabel('\\nPredicted Values')\n","ax.set_ylabel('Actual Values ');\n","\n","## Ticket labels - List must be in alphabetical order\n","ax.xaxis.set_ticklabels(['False','True'])\n","ax.yaxis.set_ticklabels(['False','True'])\n","\n","## Display the visualization of the Confusion Matrix.\n","plt.show()\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"machine_shape":"hm","name":"DenseNet121 Fold-3   SMCI vs AD","provenance":[{"file_id":"18D255N0xbZ9Pv4K7LoKOYA33mY5452zT","timestamp":1649910023698},{"file_id":"11KmzEKZ4iNdOOLgDGpWMKf1538zZn1UA","timestamp":1649909823910},{"file_id":"1Uz9WP-CrrnkXZEy_tARR5eySNxhYP1UD","timestamp":1649824329181},{"file_id":"1yl08D9WJda9cSY1v3qJEwoqmjVzMGDVK","timestamp":1648382303992},{"file_id":"1W_VhzdsW0ev4YXUdlgWGQVc8FDui_-ti","timestamp":1648355843901},{"file_id":"1WwLS7IvoVpwP2K0cG9HF3BCfim5lWeE-","timestamp":1648347425085},{"file_id":"1aeCVSDGh-GOkorZ5Bl2btjFC2p_kK_k8","timestamp":1648314735073},{"file_id":"1BTjj-YH44tZrTF7rG6y4vREOqyiL3u5W","timestamp":1648302511310},{"file_id":"1jG_r7VUlaeHdfoqDiC5T--PwdnOGDpX7","timestamp":1648292499522},{"file_id":"15j8pYQmvG_UNAnP8JuGzfD8ex_6hxRns","timestamp":1648283104327},{"file_id":"1NE32ZVaen7rQzttzj3osZe7_nXN9QMOy","timestamp":1648201474639},{"file_id":"1TgopIX2tPaVjnXLqi3W4-d6UhVK8nPEJ","timestamp":1648127135930},{"file_id":"1-T7dnfNb8Ib2zGQgpjLivEO2VwMdetwr","timestamp":1648121625144},{"file_id":"1r1lUfWnsJxZnUUPhf_ThH0HE9YscvYcQ","timestamp":1648111248098},{"file_id":"1HYazkOl83bLXhAFo_z0e9UhhR7KIhCdV","timestamp":1648061718205},{"file_id":"10mbf3ronNevgSGamc8CjNo5VuCqaUpgz","timestamp":1648055036787},{"file_id":"1luKbRAAUC-f03yc4j610EoiAHppb68BS","timestamp":1648031793067},{"file_id":"1zP4rEG5G6l4zAqoJ_IZtldeR-Rf9vIAn","timestamp":1644428204089},{"file_id":"11yTaxC3PAGGBVoJ2ggBXxzwKfysLiMF3","timestamp":1644392976089},{"file_id":"1RWGGIVivPPJdbKNKUT_E241L8JQ5spxx","timestamp":1643956276368}],"mount_file_id":"13HGBIjcTSiss9kytpfITRD6HGVM_ztPN","authorship_tag":"ABX9TyNTV5ea8LYsw49TVesz/zTm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}