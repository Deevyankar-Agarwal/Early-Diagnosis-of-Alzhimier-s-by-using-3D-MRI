{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"cUJl8Mw0QXoP"},"outputs":[],"source":["import torch\n","import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import roc_curve\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4552,"status":"ok","timestamp":1649609184098,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"NYznFz4FMRll","outputId":"1a7a5f0f-762c-46a6-8d54-b713d70ab96c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting monai\n","  Downloading monai-0.8.1-202202162213-py3-none-any.whl (721 kB)\n","\u001b[?25l\r\u001b[K     |▌                               | 10 kB 34.2 MB/s eta 0:00:01\r\u001b[K     |█                               | 20 kB 9.5 MB/s eta 0:00:01\r\u001b[K     |█▍                              | 30 kB 8.5 MB/s eta 0:00:01\r\u001b[K     |█▉                              | 40 kB 7.9 MB/s eta 0:00:01\r\u001b[K     |██▎                             | 51 kB 4.4 MB/s eta 0:00:01\r\u001b[K     |██▊                             | 61 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███▏                            | 71 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███▋                            | 81 kB 4.0 MB/s eta 0:00:01\r\u001b[K     |████                            | 92 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |████▌                           | 102 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████                           | 112 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 122 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████                          | 133 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 143 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 153 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 163 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 174 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 184 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████▋                       | 194 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████                       | 204 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 215 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 225 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 235 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 245 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 256 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████▉                    | 266 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████▎                   | 276 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 286 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████▏                  | 296 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 307 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 317 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 327 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 337 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 348 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████▉                | 358 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 368 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 378 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 389 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 399 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 409 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 419 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 430 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████▌            | 440 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 450 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 460 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████▉           | 471 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 481 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▉          | 491 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 501 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▊         | 512 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 522 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▋        | 532 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 542 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 552 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 563 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 573 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 583 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 593 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▉     | 604 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 614 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▊    | 624 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 634 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 645 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 655 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▌  | 665 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 675 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 686 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 696 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 706 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 716 kB 5.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 721 kB 5.0 MB/s \n","\u001b[?25hRequirement already satisfied: torch>=1.6 in /usr/local/lib/python3.7/dist-packages (from monai) (1.10.0+cu111)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from monai) (1.21.5)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch>=1.6->monai) (3.10.0.2)\n","Installing collected packages: monai\n","Successfully installed monai-0.8.1\n"]}],"source":["!pip install monai"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlUxE75HMNqI"},"outputs":[],"source":["import monai\n","from monai.data import decollate_batch\n","from monai.metrics import ROCAUCMetric\n","from monai.transforms import ToTensord,EnsureType,LoadImaged\n","from monai.transforms import RandAffined,RandRotated,RandGaussianNoised,Activations, AddChanneld, AsDiscrete, Compose,RandRotate90d, Resized, ScaleIntensityd, EnsureTyped"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"P0aSwEwmleyT"},"outputs":[],"source":["x=np.full(160,1) # 1 means AD 160 processes MRI for Training"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1649609264670,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"_Via2mzzs85z","outputId":"095505ce-7020-492e-b614-5c3934db5ec4"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/\n"]}],"source":["train_files={}\n","for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/'):\n","  if files:\n","    print(path)    "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"92KqzjRQgnJX"},"outputs":[],"source":[" images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD', f]) for f in files] "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZIUb-4BxmS4J"},"outputs":[],"source":[" train_files = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":463,"status":"ok","timestamp":1649609303989,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"2xRqG2ROpU2h","outputId":"108f30ff-8742-4442-d3a4-ca6e34d4e076"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/\n"]}],"source":["train_files_sMCI={}\n","for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/'):\n","  if files:\n","    print(path)\n","   "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9ezb_wKbpcLb"},"outputs":[],"source":["images_sMCI = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI', f]) for f in files]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o5Ic7GYbl99W"},"outputs":[],"source":["y=np.full(160,0) # o means stable MCI "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A2Wmvm0VqGvC"},"outputs":[],"source":["train_files_sMCI = [{\"img\": img, \"label\": label} for img, label in zip(images_sMCI, y)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nu56u0jmn99m"},"outputs":[],"source":["train_files.extend(train_files_sMCI)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":391,"status":"ok","timestamp":1649609329674,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"nXXjXi8moEfu","outputId":"8456b9fc-1258-43d6-f8ee-77dd307b44ba"},"outputs":[{"name":"stdout","output_type":"stream","text":["[{'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0266_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007095334102_S12381_I119390.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0266_MR_MPR__GradWarp__N3__Scaled_Br_20070819154701884_S12381_I68898.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0272_MR_MPR__GradWarp__N3__Scaled_Br_20070819160811308_S12394_I68927.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0310_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007095729372_S12468_I119395.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0310_MR_MPR__GradWarp__N3__Scaled_Br_20070819162315993_S12468_I68944.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0517_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007100124596_S15001_I119399.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0517_MR_MPR__GradWarp__N3__Scaled_Br_20070819165258579_S15001_I68976.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0528_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007100403336_S14629_I119401.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0528_MR_MPR__GradWarp__N3__Scaled_Br_20070821191602878_S14629_I69679.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0740_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007101045669_S17472_I119406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_0740_MR_MPR__GradWarp__N3__Scaled_Br_20070819180306941_S17472_I69048.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_1409_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070821114304781_S33787_I69400.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_128_S_1430_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071030174634532_S39199_I79857.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_130_S_0956_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070210221002388_S20667_I39185.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_130_S_1201_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801182711594_S25082_I63757.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_130_S_1290_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801183629045_S26038_I63766.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_130_S_1337_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801184528226_S27584_I63775.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_131_S_0319_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070403131044669_S12322_I47984.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_131_S_0457_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080225093858034_S13976_I92406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_131_S_0497_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070403140455408_S15315_I48038.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_131_S_0691_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070403141449754_S17266_I48047.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_133_S_0493_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081007152542589_S14156_I119503.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_133_S_1055_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008100559240_S22386_I119646.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_133_S_1170_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008101107947_S24674_I119651.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_133_S_1170_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080207174424754_S24674_I89957.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_136_S_0194_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008133147404_S13178_I119717.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_136_S_0194_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070215183625381_S13178_I40239.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_136_S_0299_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008133944436_S13839_I119726.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_136_S_0299_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215202408595_S13839_I40312.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_136_S_0300_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008134134874_S14136_I119728.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_136_S_0300_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215205110923_S14136_I40328.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_136_S_0426_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008134327484_S14581_I119730.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_136_S_0426_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215211810806_S14581_I40356.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_137_S_0366_MR_MPR__GradWarp__N3__Scaled_Br_20070323161105797_S14199_I46608.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_137_S_0438_MR_MPR__GradWarp__N3__Scaled_Br_20070323162337393_S13764_I46615.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_137_S_0796_MR_MPR__GradWarp__N3__Scaled_Br_20080207175303986_S18077_I89979.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_137_S_0841_MR_MPR__GradWarp__N3__Scaled_Br_20070419175857278_S19351_I49776.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_137_S_1041_MR_MPR-R__GradWarp__N3__Scaled_Br_20070306190902216_S22310_I43071.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_141_S_0696_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071119104836717_S18373_I82738.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_141_S_0790_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080220165919265_S18766_I91253.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_0619_MR_MPR-R__GradWarp__N3__Scaled_2_Br_20081001115218896_S15145_I118678.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_0619_MR_MPR-R__GradWarp__N3__Scaled_Br_20070411125458928_S15145_I48617.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_0816_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002102135862_S18402_I118984.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_0816_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070217005829488_S18402_I40731.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_0938_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001115856421_S19852_I118685.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_0938_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070219175406282_S19852_I40980.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_0955_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001120235839_S20004_I118689.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_0955_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070217013411002_S20004_I40754.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_002_S_1018_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070217030439623_S23128_I40817.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_003_S_0931_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070503165327269_S20051_I53390.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_003_S_1059_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070501173720913_S22300_I52816.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_003_S_1257_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070501172255698_S27340_I52790.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_005_S_0221_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070910164745994_S11958_I72128.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_005_S_0814_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070923123111793_S18390_I74591.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_005_S_0929_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070923124929945_S19669_I74609.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_005_S_1341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070717180348670_S27673_I60417.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_006_S_0547_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070926110116880_S19779_I75279.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_006_S_0653_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070605122642054_S23255_I55948.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_007_S_0316_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001120625745_S12583_I118693.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_007_S_0316_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070118030943701_S12583_I36573.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_007_S_1248_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070713113209876_S25568_I59950.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_007_S_1304_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070713111105724_S26475_I59910.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_007_S_1339_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070607134807952_S27414_I56319.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_009_S_1334_MR_MPR-R__GradWarp__N3__Scaled_Br_20070717182244238_S27423_I60434.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_009_S_1354_MR_MPR__GradWarp__N3__Scaled_Br_20070717183309825_S27634_I60443.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_010_S_0786_MR_MPR____N3__Scaled_2_Br_20081002102855696_S19638_I118990.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_010_S_0786_MR_MPR____N3__Scaled_Br_20070807153633938_S19638_I65597.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_010_S_0829_MR_MPR____N3__Scaled_2_Br_20081001122514861_S26117_I118707.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_010_S_0829_MR_MPR____N3__Scaled_Br_20070731163202385_S26117_I63349.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_011_S_0002_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070108225928642_S9107_I35475.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_011_S_0003_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20061208111300610_S9127_I32237.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_011_S_0010_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061208114538147_S8800_I32270.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_011_S_0053_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070108231357675_S10064_I35486.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_011_S_0183_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061206183315171_S12000_I32003.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_012_S_0689_MR_MPR-R____N3__Scaled_2_Br_20081001123144447_S16392_I118713.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_012_S_0689_MR_MPR-R____N3__Scaled_Br_20080225093300703_S16392_I92398.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_012_S_0712_MR_MPR____N3__Scaled_2_Br_20081001123034709_S16704_I118712.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_012_S_0712_MR_MPR____N3__Scaled_Br_20080225093529482_S16704_I92401.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_012_S_0720_MR_MPR____N3__Scaled_2_Br_20081001123253253_S17682_I118714.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_012_S_0720_MR_MPR____N3__Scaled_Br_20080225174150688_S17682_I92529.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_012_S_0803_MR_MPR____N3__Scaled_2_Br_20081001123507114_S19197_I118716.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_012_S_0803_MR_MPR____N3__Scaled_Br_20070711172746366_S19197_I59250.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_013_S_0592_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071028192251104_S18419_I79144.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_013_S_0699_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070727182856171_S18366_I62650.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_013_S_0996_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426092308209_S22240_I51183.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_013_S_1161_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426171211057_S24399_I51485.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_013_S_1205_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426173828172_S25024_I51542.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070212231950856_S12402_I39620.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_014_S_1095_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070320181218511_S23323_I45740.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_016_S_0991_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070217023139686_S21737_I40794.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_016_S_1263_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070804134033886_S27303_I64622.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_018_S_0286_MR_MPR____N3__Scaled_2_Br_20081001135113951_S12435_I118779.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_018_S_0286_MR_MPR____N3__Scaled_Br_20070120013124801_S12435_I37007.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_018_S_0335_MR_MPR____N3__Scaled_2_Br_20081008153133922_S14586_I119801.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_018_S_0335_MR_MPR____N3__Scaled_Br_20070101214204431_S14586_I35009.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_018_S_0633_MR_MPR-R____N3__Scaled_2_Br_20081010112443772_S15573_I120057.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_018_S_0633_MR_MPR-R____N3__Scaled_Br_20070101222816515_S15573_I35036.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_018_S_0682_MR_MPR____N3__Scaled_2_Br_20081008153234434_S16293_I119802.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_018_S_0682_MR_MPR____N3__Scaled_Br_20070101224115510_S16293_I35044.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_020_S_0213_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070718120158728_S12386_I60600.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20061217125152228_S12836_I33444.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_021_S_0642_MR_MPR__GradWarp__N3__Scaled_Br_20061217130526879_S15935_I33452.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20061217132116005_S17580_I33461.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_021_S_1109_MR_MPR__GradWarp__N3__Scaled_Br_20070727185946236_S23446_I62695.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_022_S_0007_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712142439074_S9024_I59366.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712152611314_S11485_I59484.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_022_S_0219_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712154620604_S12375_I59533.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_022_S_0543_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712155153926_S14849_I59543.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0083_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001153941224_S10568_I118874.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0083_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061130194138457_S10568_I31143.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0084_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100834283_S10764_I118970.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0084_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20061201102044695_S10764_I31205.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0093_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100757991_S10736_I118969.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0139_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100910505_S11079_I118971.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0139_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061201144502375_S11079_I31300.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0916_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001154252419_S19228_I118879.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_0916_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061203142844438_S19228_I31533.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001160410209_S26314_I118923.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070727133707675_S26314_I62433.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_1289_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001160534628_S26374_I118925.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_023_S_1289_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080207172946284_S26374_I89938.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_024_S_1171_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731172208570_S24659_I63406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_024_S_1307_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731173131780_S27061_I63415.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_027_S_0404_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061222194841960_S13866_I34204.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_027_S_0850_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070412191003564_S18554_I48996.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_027_S_1081_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070327152141858_S25357_I47168.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_027_S_1082_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070327161431010_S22938_I47204.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070327165452524_S25764_I47228.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_027_S_1385_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070330094058546_S28133_I47574.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_029_S_0836_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070806122937449_S18151_I65013.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_029_S_0999_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070805144703422_S23248_I64898.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070718151433161_S22977_I60741.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_029_S_1184_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070812143109046_S25463_I67210.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_031_S_0321_MR_MPR__GradWarp__N3__Scaled_Br_20070807093706127_S12365_I65383.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_031_S_0554_MR_MPR-R__GradWarp__N3__Scaled_Br_20070804144512116_S14904_I64711.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_031_S_1209_MR_MPR__GradWarp__N3__Scaled_Br_20070813153725713_S25028_I67441.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_032_S_0147_MR_MPR____N3__Scaled_2_Br_20081003100226549_S11186_I119079.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20070123192754258_S11186_I37210.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_032_S_0400_MR_MPR____N3__Scaled_2_Br_20081003101339687_S13238_I119087.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_032_S_0400_MR_MPR____N3__Scaled_Br_20070118000329335_S13238_I36459.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_032_S_1037_MR_MPR____N3__Scaled_2_Br_20081003104216708_S22208_I119114.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_032_S_1101_MR_MPR____N3__Scaled_2_Br_20081003104506735_S22783_I119116.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_032_S_1101_MR_MPR____N3__Scaled_Br_20070731180142730_S22783_I63442.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121149525_S17337_I119128.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070303125222238_S17337_I42400.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_0733_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121546031_S16932_I119132.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_0733_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070303133222445_S16932_I42425.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121834902_S16956_I119135.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070304110859078_S16956_I42441.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_0889_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070426183239887_S19296_I51629.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_1281_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070517161803030_S26136_I54780.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070517162231894_S26144_I54785.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_1285_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426175923899_S26128_I51588.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_033_S_1308_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070517160021095_S26600_I54752.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_035_S_0341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070319175003745_S12952_I45213.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_036_S_0577_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070119233126708_S14974_I36914.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_036_S_0759_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070120004026768_S18094_I36969.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070209144410346_S18264_I38652.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_036_S_1001_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070209145840163_S22691_I38661.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/AD/ADNI_037_S_0627_MR_MPR__GradWarp__N3__Scaled_Br_20071030172722998_S16313_I79831.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_123_S_4780_MR_MT1__GradWarp__N3m_Br_20120626162853899_S155005_I312845.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_099_S_4463_MR_MT1__GradWarp__N3m_Br_20120212192535853_S139377_I283954.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_109_S_1114_MR_MPR__GradWarp__B1_Correction__N3_Br_20070731184540222_S24702_I63488.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_109_S_4594_MR_MT1__GradWarp__N3m_Br_20120424140212439_S147922_I300259.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_100_S_0006_MR_MPR____N3__Scaled_Br_20091214141413429_S66586_I160861.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_099_S_2063_MR_MT1__GradWarp__N3m_Br_20120409163816931_S93362_I296532.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_099_S_4498_MR_MT1__GradWarp__N3m_Br_20120319162928405_S143906_I291051.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_109_S_1183_MR_MPR__GradWarp__B1_Correction__N3_Br_20070808202230702_S24718_I66166.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_109_S_4531_MR_MT1__GradWarp__N3m_Br_20120322162946257_S144105_I291870.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_109_S_0950_MR_MPR__GradWarp__B1_Correction__N3_Br_20080313120543591_S21164_I97195.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_109_S_4455_MR_MT1__GradWarp__N3m_Br_20120221111520881_S140738_I285905.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_094_S_1417_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070918133138011_S35042_I73651.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_094_S_4630_MR_MT1__GradWarp__N3m_Br_20170503085644464_S146117_I846730.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_4311_MR_MT1__GradWarp__N3m_Br_20111030164151647_S125503_I263680.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_4443_MR_MT1__GradWarp__N3m_Br_20111228151717862_S134935_I274669.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_4986_MR_MT1__GradWarp__N3m_Br_20121009174853195_S169690_I339187.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_094_S_0921_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070418083303012_S19581_I49518.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_4312_MR_MT1__GradWarp__N3m_Br_20120308100024377_S141217_I288869.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_094_S_1314_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070731123416880_S27487_I63201.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_4360_MR_MT1__GradWarp__N3m_Br_20111121113105970_S130051_I267765.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_094_S_4858_MR_MT1__GradWarp__N3m_Br_20170502151943862_S167122_I846437.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4394_MR_MT1__GradWarp__N3m_Br_20120106140625480_S135022_I275764.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4522_MR_MT1__GradWarp__N3m_Br_20120222111556151_S141099_I286083.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4465_MR_MT1__GradWarp__N3m_Br_20120217144924410_S140703_I285486.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4383_MR_MT1__GradWarp__N3m_Br_20111216164220883_S132298_I272712.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4871_MR_MT1__GradWarp__N3m_Br_20120828084311101_S160411_I326503.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4613_MR_MT1__GradWarp__N3m_Br_20120405185306701_S146058_I296329.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4941_MR_MT1__GradWarp__N3m_Br_20121016173414073_S170468_I340527.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4390_MR_MT1__GradWarp__N3m_Br_20111216164432636_S132268_I272714.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_4300_MR_MT1__GradWarp__N3m_Br_20111030165146839_S125190_I263690.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4539_MR_MT1__GradWarp__N3m_Br_20120405190041648_S142560_I296336.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_041_S_4989_MR_MT1__GradWarp__N3m_Br_20121025121610142_S171438_I342390.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_067_S_0607_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070111020708708_S15893_I35942.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_036_S_4736_MR_MT1__N3m_Br_20120626142007341_S151992_I312653.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_053_S_0621_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070802191244427_S15441_I64193.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_057_S_0464_MR_MPR__GradWarp__B1_Correction__N3_Br_20061229151447223_S14736_I34706.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_067_S_0290_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20061229183726441_S12592_I34845.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_037_S_1421_MR_MPR-R__GradWarp__N3_Br_20071031140637215_S38601_I79950.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_062_S_1182_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070424131220294_S25165_I50570.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_041_S_1260_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070806164614177_S25805_I65243.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_052_S_4626_MR_MT1__GradWarp__N3m_Br_20120406134745265_S146349_I296423.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_031_S_4476_MR_MT1__N3m_Br_20120201114333350_S138754_I281842.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_036_S_0656_MR_MPR__GradWarp__B1_Correction__N3_Br_20070119234340991_S16286_I36923.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_031_S_0351_MR_MPR__GradWarp__N3_Br_20070807100037630_S13460_I65396.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_029_S_2376_MR_MT1__GradWarp__N3m_Br_20120808150736028_S140231_I322525.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_035_S_0033_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070319171138269_S10395_I45169.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_032_S_0718_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20081026162151955_S56614_I123878.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_033_S_1284_MR_MPR__GradWarp__B1_Correction__N3_Br_20070517163002017_S26686_I54798.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_036_S_0673_MR_MPR__GradWarp__B1_Correction__N3_Br_20070120001040042_S17157_I36948.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_031_S_4590_MR_MT1__N3m_Br_20120322172837106_S144046_I291927.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_029_S_1384_MR_MPR__GradWarp__B1_Correction__N3_Br_20070805145102556_S29082_I64902.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_012_S_4987_MR_MT1__N3m_Br_20121213150551136_S173242_I351339.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_021_S_0273_MR_MPR-R__GradWarp__N3_Br_20061217142914418_S12169_I33497.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_027_S_4966_MR_MT1__N3m_Br_20121016163944343_S170704_I340506.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_022_S_0961_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070712161347149_S20711_I59600.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_016_S_2031_MR_MT1__GradWarp__N3m_Br_20110308082338608_S99346_I222772.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_022_S_0004_MR_MPR__GradWarp__B1_Correction__N3_Br_20070804134258805_S9233_I64626.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_012_S_0634_MR_MPR____N3_Br_20100114155947906_S71018_I163688.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_029_S_1218_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070813144946904_S25477_I67393.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_012_S_4849_MR_MT1__N3m_Br_20130801183718097_S192305_I384088.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_018_S_4809_MR_MT1__N3m_Br_20120626164020476_S154963_I312863.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_007_S_4611_MR_MT1__GradWarp__N3m_Br_20120405104126984_S145205_I295877.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_002_S_0782_MR_MPR__GradWarp__B1_Correction__N3_Br_20070217003330133_S17835_I40716.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_006_S_4679_MR_MT1__N3m_Br_20121213154052681_S176759_I351387.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_007_S_4467_MR_MT1__GradWarp__N3m_Br_20120130094717221_S138180_I281397.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_005_S_0324_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20061212171807772_S12599_I32892.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_009_S_5000_MR_MT1__GradWarp__N3m_Br_20121205123642241_S172474_I349550.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_002_S_4447_MR_MT1__N3m_Br_20120521111700811_S148198_I305503.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_137_S_4536_MR_MT1__GradWarp__N3m_Br_20120308101908754_S141541_I288887.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_137_S_4299_MR_MT1__GradWarp__N3m_Br_20111108160313152_S127896_I265267.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_141_S_2333_MR_MT1__GradWarp__N3m_Br_20111008153347377_S122675_I260253.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_137_S_0800_MR_MPR__GradWarp__N3_Br_20070306181953188_S17822_I43033.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_137_S_1414_MR_MPR-R__GradWarp__N3_Br_20070922113057694_S36839_I74560.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_136_S_0107_MR_MPR__GradWarp__B1_Correction__N3_Br_20070215231412938_S11707_I40444.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_941_S_4036_MR_MT1__GradWarp__N3m_Br_20110524152255814_S109397_I236984.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_141_S_1378_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20080220172008524_S28926_I91308.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_141_S_1052_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070402174638512_S22922_I47726.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_141_S_4160_MR_MT1__GradWarp__N3m_Br_20110928090732094_S121753_I258664.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_135_S_4356_MR_MT1__GradWarp__N3m_Br_20111121111949549_S128879_I267753.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_135_S_4722_MR_MT1__GradWarp__N3m_Br_20120521161520372_S150596_I305615.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_130_S_4817_MR_MT1__N3m_Br_20120809141858031_S156603_I322951.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_135_S_4489_MR_MT1__GradWarp__N3m_Br_20120212191136852_S139411_I283942.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_135_S_4309_MR_MT1__GradWarp__N3m_Br_20111030175833673_S126435_I263754.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_130_S_4405_MR_MT1__N3m_Br_20120125125546237_S137367_I280550.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_130_S_4417_MR_MT1__N3m_Br_20120125131409065_S137433_I280572.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_135_S_4281_MR_MT1__GradWarp__N3m_Br_20111030164458283_S125351_I263683.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_135_S_4723_MR_MT1__GradWarp__N3m_Br_20120521161754452_S150582_I305621.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_130_S_2391_MR_MT1__N3m_Br_20120125132038603_S133690_I280580.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_128_S_0715_MR_MPR-R__GradWarp__N3_Br_20080207104831657_S16987_I89787.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_128_S_0200_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20080318144750476_S18927_I98870.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_129_S_4287_MR_MT1__GradWarp__N3m_Br_20111030172838553_S125945_I263726.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_130_S_0505_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070210232353031_S17291_I39234.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_128_S_2045_MR_MT1__GradWarp__N3m_Br_20120424140520790_S134312_I300262.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_128_S_4742_MR_MT1__GradWarp__N3m_Br_20120626142518996_S152151_I312658.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_127_S_4301_MR_MT1__GradWarp__N3m_Br_20111030174313463_S126224_I263740.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_129_S_1246_MR_MPR-R__GradWarp__N3_Br_20070821200112689_S26514_I69736.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_128_S_2220_MR_MT1__GradWarp__N3m_Br_20110310113450742_S96842_I223525.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_128_S_0770_MR_MPR-R__GradWarp__N3_Br_20070828145553713_S17429_I70862.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_126_S_0709_MR_MPR-R__GradWarp__B1_Correction_Br_20070209202341745_S17325_I38976.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_126_S_2407_MR_MT1__GradWarp__N3m_Br_20120629154745562_S151633_I313676.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_127_S_4210_MR_MT1__GradWarp__N3m_Br_20110910141826708_S121468_I255431.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_126_S_2405_MR_MT1__GradWarp__N3m_Br_20120521112730328_S148312_I305515.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_123_S_4170_MR_MT1__GradWarp__N3m_Br_20110906122701006_S120532_I254811.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_123_S_4127_MR_MT1__GradWarp__N3m_Br_20110816090718108_S117357_I250621.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_126_S_4896_MR_MT1__GradWarp__N3m_Br_20120828085114550_S160096_I326506.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_126_S_2360_MR_MT1__GradWarp__N3m_Br_20111216190951330_S130277_I272846.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_126_S_1187_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070412184413054_S25142_I48963.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_126_S_4514_MR_MT1__GradWarp__N3m_Br_20120216104047811_S140403_I285133.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_114_S_5047_MR_MT1__GradWarp__N3m_Br_20130313092855363_S183939_I362908.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_099_S_4205_MR_MT1__GradWarp__N3m_Br_20111015082201943_S124692_I261079.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_114_S_1118_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070419175538297_S23802_I49772.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_099_S_1034_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070403125208679_S21758_I47957.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_123_S_1300_MR_MPR____N3__Scaled_Br_20070809134209477_S27689_I66305.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_109_S_4380_MR_MT1__GradWarp__N3m_Br_20120109091019426_S135424_I276573.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_100_S_0296_MR_MPR____N3_Br_20091214142150532_S67603_I160870.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_114_S_2392_MR_MT1__GradWarp__N3m_Br_20120227123246523_S141141_I286648.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_109_S_2200_MR_MT1__GradWarp__N3m_Br_20110310092425329_S95177_I223482.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_123_S_2363_MR_MT1__GradWarp__N3m_Br_20120416131710652_S130016_I297591.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_2191_MR_MT1__GradWarp__N3m_Br_20120405190146021_S114075_I296337.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_4614_MR_MT1__GradWarp__N3m_Br_20120322173005753_S144053_I291929.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_082_S_2121_MR_MT1__GradWarp__N3m_Br_20110524152518970_S109355_I236988.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_4216_MR_MT1__GradWarp__N3m_Br_20110906123920455_S120793_I254822.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_098_S_2079_MR_MT1__GradWarp__N3m_Br_20110330133916097_S101840_I225424.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_2225_MR_MT1__GradWarp__N3m_Br_20110816094939060_S117924_I250655.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_2264_MR_MT1__GradWarp__N3m_Br_20110804072727719_S115755_I248640.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_094_S_2238_MR_MT1__GradWarp__N3m_Br_20110816094007204_S117425_I250645.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_098_S_2052_MR_MT1__GradWarp__N3m_Br_20110330133151519_S101955_I225422.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_099_S_0291_MR_MPR__GradWarp__B1_Correction__N3_Br_20061228141150177_S12065_I34523.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_2037_MR_MT1__GradWarp__N3m_Br_20110309100955306_S100019_I223249.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_2164_MR_MT1__GradWarp__N3m_Br_20110511153145581_S107939_I234641.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_068_S_2168_MR_MT1__GradWarp__N3m_Br_20120405184628180_S112655_I296323.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_2182_MR_MT1__GradWarp__N3m_Br_20120216105951294_S140093_I285151.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_068_S_4431_MR_MT1__GradWarp__N3m_Br_20120227123037012_S139909_I286646.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_2116_MR_MT1__GradWarp__N3m_Br_20110504104730615_S105119_I232859.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_073_S_0746_MR_MPR__GradWarp__B1_Correction__N3_Br_20070731112157142_S23285_I63117.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_2072_MR_MT1__GradWarp__N3m_Br_20110331135217019_S102455_I225564.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_2093_MR_MT1__GradWarp__N3m_Br_20110427150449440_S104401_I229290.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_072_S_4063_MR_MT1__GradWarp__N3m_Br_20110623113553803_S112302_I241403.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_052_S_4944_MR_MT1__GradWarp__N3m_Br_20121211123518900_S171597_I350690.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_053_S_0919_MR_MPR-R__GradWarp__B1_Correction_Br_20070807172214763_S20422_I65690.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_052_S_0989_MR_MPR__GradWarp__B1_Correction__N3_Br_20070802185834638_S22476_I64178.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_052_S_2249_MR_MT1__GradWarp__N3m_Br_20110715130616290_S114222_I244945.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_067_S_2196_MR_MT1__GradWarp__N3m_Br_20110623110504418_S110848_I241362.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_053_S_2396_MR_MT1__N3m_Br_20120216105823309_S140046_I285149.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_053_S_2357_MR_MT1__N3m_Br_20111216182408911_S127922_I272802.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_053_S_4557_MR_MT1__N3m_Br_20120319155645998_S143365_I291000.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_057_S_1269_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070818134602732_S25879_I68549.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_068_S_0802_MR_MT1__GradWarp__N3m_Br_20150618232937107_S259814_I498019.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_037_S_0377_MR_MPR__GradWarp__N3_Br_20071125141317504_S13873_I83093.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_029_S_2395_MR_MT1__GradWarp__N3m_Br_20140529174354404_S141416_I427978.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_041_S_4510_MR_MT1__GradWarp__N3m_Br_20120217143926674_S140538_I285452.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_041_S_4876_MR_MT1__GradWarp__N3m_Br_20120828112536527_S161044_I326580.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_041_S_1418_MR_MPR__GradWarp__B1_Correction__N3_Br_20070918131937079_S36523_I73637.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_037_S_4302_MR_MT1__GradWarp__N3m_Br_20111030175629148_S126426_I263752.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_032_S_2119_MR_MT1__GradWarp__N3m_Br_20110505162723467_S107270_I233454.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_032_S_2247_MR_MT1__GradWarp__N3m_Br_20110906115344208_S119042_I254762.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_031_S_0867_MR_MPR__GradWarp__N3_Br_20070813150816080_S19256_I67404.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_035_S_2061_MR_MT1__GradWarp__N3m_Br_20110427152327109_S103446_I229323.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_027_S_1045_MR_MPR__GradWarp__B1_Correction__N3_Br_20070327162204232_S22174_I47208.nii', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Train/SMCI/ADNI_027_S_4869_MR_MT1__GradWarp__N3m_Br_20120828114122398_S161647_I326588.nii', 'label': 0}]\n"]}],"source":["print(train_files)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_-tQmulsLAFi"},"outputs":[],"source":["  train_transforms = Compose(\n","        [\n","            LoadImaged(keys=[\"img\"]),\n","            #AddChanneld(keys=[\"img\"]),\n","            #RandAffined(keys=['img'], prob=0.5, translate_range=10), \n","            #RandRotated(keys=['img'], prob=0.6, range_x=10.0),\n","            #RandGaussianNoised(keys='img', prob=0.5),\n","            #ToTensord(keys=[\"img\"]),\n","        ]\n","    )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w2dtOA-uRVYG"},"outputs":[],"source":["post_pred = Compose([EnsureType(), Activations(softmax=True)])\n","post_label = Compose([EnsureType(), AsDiscrete(to_onehot=2)])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LwPcqiDsUBkD"},"outputs":[],"source":["from torch.utils.data import DataLoader\n","from torch.utils.tensorboard import SummaryWriter"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N4Mqm0grS1EO"},"outputs":[],"source":["#check_ds = monai.data.Dataset(data=train_files, transform=train_transforms)\n","#check_loader = DataLoader(check_ds, batch_size=4, num_workers=4, pin_memory=torch.cuda.is_available())\n","#check_data = monai.utils.misc.first(check_loader)\n","#print(check_data[\"img\"].shape, check_data[\"label\"])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iVsZ9Mx6oeN7"},"outputs":[],"source":["# create a training data loader\n","train_ds = monai.data.Dataset(data=train_files, transform=train_transforms)\n","train_loader = DataLoader(train_ds, batch_size=2, shuffle=True, num_workers=4, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":354,"status":"ok","timestamp":1649609421057,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"coRjr9lk0pip","outputId":"2fc2b3ed-c543-4332-883f-60d4a828ab25"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Valid/AD/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Valid/AD/'):\n","  if files:\n","    print(path)    "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Bb1UmOqp2Mzo"},"outputs":[],"source":["x=np.full(40,1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U1t6ApKc3z3C"},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Valid/AD', f]) for f in files] "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cZFZIBmE4diO"},"outputs":[],"source":["valid_files = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1649609528656,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"j3ruNdWQ6efP","outputId":"d3ea006b-e34e-46d4-92a1-2e2b6d7a3f41"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Valid/SMCI/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Valid/SMCI/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CPeztrsB6k-V"},"outputs":[],"source":["x=np.full(40,0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zwshfucp6pey"},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Valid/SMCI', f]) for f in files] "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tTnjUbZW6yuZ"},"outputs":[],"source":["valid_files_sMCI = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZxDNtMH97eOE"},"outputs":[],"source":["valid_files.extend(valid_files_sMCI)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U5VuoLnM7pfM"},"outputs":[],"source":["#check_ds = monai.data.Dataset(data=valid_files, transform=train_transforms)\n","#check_loader = DataLoader(check_ds, batch_size=8, num_workers=4, pin_memory=torch.cuda.is_available())\n","#check_data = monai.utils.misc.first(check_loader)\n","#print(check_data[\"img\"].shape, check_data[\"label\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qVKSOKbw7296"},"outputs":[],"source":["# create a validation data loader\n","valid_ds = monai.data.Dataset(data=valid_files, transform=train_transforms)\n","valid_loader = DataLoader(valid_ds, batch_size=2,shuffle=True,num_workers=4, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":386,"status":"ok","timestamp":1649609843128,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"w59RYjFHM4s9","outputId":"bfb6e88a-ec11-442c-e787-eabfe7cd817f"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PxrcqmvMNAi9"},"outputs":[],"source":["x=np.full(29,1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"50fO8lN-NNXk"},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29', f]) for f in files] "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":333,"status":"ok","timestamp":1649609876371,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"BhuE2IwePDBJ","outputId":"94a21a13-b8b7-4e7c-f15a-79e25aea1f3f"},"outputs":[{"name":"stdout","output_type":"stream","text":["['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20080421171040104_S47745_I103333.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090223154912775_S61415_I136737.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090316152042654_S63689_I139062.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_027_S_1082_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081229144920056_S60862_I132368.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090512151630340_S64537_I143676.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_023_S_0084_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080224132527438_S44784_I92169.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080229153509900_S45881_I94405.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20080515114721734_S49511_I105737.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20090127130302490_S57137_I134624.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080516095357795_S49746_I105878.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_016_S_0991_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721103719643_S66595_I149771.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_010_S_0829_MR_MPR____N3__Scaled_Br_20090227152103934_S62987_I137223.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_010_S_0786_MR_MPR____N3__Scaled_Br_20100105142259322_S58426_I162100.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_005_S_1341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090701135215664_S65452_I147406.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_007_S_1339_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721101114129_S67376_I149749.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_002_S_1018_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081224104711856_S60832_I132197.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_005_S_0221_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080501163219594_S49279_I104489.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_002_S_0938_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081104151647760_S58211_I125155.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0793_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081230153105872_S60719_I132424.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0535_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080702154348870_S51763_I112301.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0730_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081023151703543_S54793_I123220.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_057_S_1379_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514103130382_S66419_I143815.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_057_S_1371_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514101747514_S66427_I143792.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_041_S_1368_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090513123110219_S64654_I143723.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317134835050_S63547_I139235.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_1308_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317140629096_S63613_I139266.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081028132916623_S57028_I124258.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081026130730923_S56031_I123722.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081023111433234_S55321_I123024.nii']\n"]}],"source":["print(images)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UbezDmYZNdU-"},"outputs":[],"source":["test_files= [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":366,"status":"ok","timestamp":1649609886797,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"bBuIqGtpnS8V","outputId":"d797d4d7-b0aa-4f8f-84bb-bc9013626378"},"outputs":[{"data":{"text/plain":["[{'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20080421171040104_S47745_I103333.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090223154912775_S61415_I136737.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090316152042654_S63689_I139062.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_027_S_1082_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081229144920056_S60862_I132368.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090512151630340_S64537_I143676.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_023_S_0084_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080224132527438_S44784_I92169.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080229153509900_S45881_I94405.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20080515114721734_S49511_I105737.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20090127130302490_S57137_I134624.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080516095357795_S49746_I105878.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_016_S_0991_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721103719643_S66595_I149771.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_010_S_0829_MR_MPR____N3__Scaled_Br_20090227152103934_S62987_I137223.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_010_S_0786_MR_MPR____N3__Scaled_Br_20100105142259322_S58426_I162100.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_005_S_1341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090701135215664_S65452_I147406.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_007_S_1339_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721101114129_S67376_I149749.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_002_S_1018_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081224104711856_S60832_I132197.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_005_S_0221_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080501163219594_S49279_I104489.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_002_S_0938_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081104151647760_S58211_I125155.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0793_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081230153105872_S60719_I132424.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0535_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080702154348870_S51763_I112301.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_062_S_0730_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081023151703543_S54793_I123220.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_057_S_1379_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514103130382_S66419_I143815.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_057_S_1371_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514101747514_S66427_I143792.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_041_S_1368_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090513123110219_S64654_I143723.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317134835050_S63547_I139235.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_1308_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317140629096_S63613_I139266.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081028132916623_S57028_I124258.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081026130730923_S56031_I123722.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD-29/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081023111433234_S55321_I123024.nii',\n","  'label': 1}]"]},"execution_count":33,"metadata":{},"output_type":"execute_result"}],"source":["test_files"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":335,"status":"ok","timestamp":1649609910810,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"BTX-NshNN67U","outputId":"6270c786-1cea-4b71-f22f-44d975e9c5b0"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V3Mx0BFpOgxK"},"outputs":[],"source":["x=np.full(29,0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WNTSkpIjOj2w"},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI', f]) for f in files] "]},{"cell_type":"markdown","metadata":{"id":"vTGEiVvEJADY"},"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":348,"status":"ok","timestamp":1649609923385,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"Ozj2euWTPdpY","outputId":"a9ec7591-c38e-466d-cf52-a0e0a91c10f5"},"outputs":[{"name":"stdout","output_type":"stream","text":["['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_137_S_0158_MR_MPR-R__GradWarp__N3_Br_20070321171006007_S11647_I45874.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_137_S_0481_MR_MPR-R__GradWarp__N3_Br_20070327121645055_S14293_I47057.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_137_S_4678_MR_MT1__GradWarp__N3m_Br_20120521101224968_S149048_I305449.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_133_S_1031_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070213234237752_S21551_I40023.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_941_S_4764_MR_MT1__GradWarp__N3m_Br_20120626140700552_S152506_I312638.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_136_S_1227_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070801195111849_S26398_I63842.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_133_S_0912_MR_MPR__GradWarp__B1_Correction__N3_Br_20070213230413512_S19884_I39999.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_141_S_0851_MR_MPR__GradWarp__B1_Correction__N3_Br_20070403112630435_S19364_I47869.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_153_S_4838_MR_MT1__GradWarp__N3m_Br_20120809145424299_S157969_I323002.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_153_S_4621_MR_MT1__GradWarp__N3m_Br_20120405104451820_S144994_I295881.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_4553_MR_MT1__GradWarp__N3m_Br_20120227121945054_S141277_I286635.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_130_S_0449_MR_MPR__GradWarp__B1_Correction__N3_Br_20081016170726910_S15123_I121507.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_133_S_0792_MR_MPR__GradWarp__B1_Correction__N3_Br_20070809144104560_S18306_I66371.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_4571_MR_MT1__GradWarp__N3m_Br_20120319143204480_S143575_I290959.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_130_S_0102_MR_MPR__GradWarp__B1_Correction__N3_Br_20070212203515208_S10746_I39459.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_133_S_0771_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20080224144832352_S18575_I92285.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_130_S_0783_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070210233557237_S18022_I39251.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_5066_MR_MT1__GradWarp__N3m_Br_20130208125517584_S181649_I358509.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_4653_MR_MT1__GradWarp__N3m_Br_20120424135432430_S147791_I300250.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_4636_MR_MT1__GradWarp__N3m_Br_20120405102704694_S144951_I295861.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_127_S_1140_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070731210730314_S24277_I63641.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_0608_MR_MPR__GradWarp__N3_Br_20070819173116210_S15211_I69015.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_123_S_4806_MR_MT1__GradWarp__N3m_Br_20120626163302938_S154998_I312849.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_1088_MR_MPR__GradWarp__B1_Correction__N3_Br_20070819183840416_S23786_I69099.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_116_S_4635_MR_MT1__GradWarp__N3m_Br_20121025150702194_S159504_I342605.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_2123_MR_MT1__GradWarp__N3m_Br_20120416132356262_S134342_I297597.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_0225_MR_MPR-R__GradWarp__N3_Br_20070819150427437_S11678_I68845.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_128_S_1408_MR_MPR-R__GradWarp__B1_Correction__N3_Br_20070820165411633_S36472_I69288.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/SMCI/ADNI_116_S_4898_MR_MT1__GradWarp__N3m_Br_20120828085908613_S160168_I326508.nii']\n"]}],"source":["print(images)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l-fmwiL9Pmdt"},"outputs":[],"source":["test_files_sMCI= [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OU_zrGhaPwJF"},"outputs":[],"source":["test_files.extend(test_files_sMCI)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BSkM4T7KP_9_"},"outputs":[],"source":["# create a test data loader\n","test_ds = monai.data.Dataset(data=test_files, transform=train_transforms)\n","test_loader = DataLoader(test_ds, batch_size=1, shuffle=True, num_workers=1, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0jRFNQcxJUOf"},"outputs":[],"source":["  #from monai.networks.nets.efficientnet import EfficientNetBN\n","  device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","  #model=EfficientNetBN(\"efficientnet-b1\",spatial_dims=3, in_channels=1, num_classes=2).to(device)\n","  model = monai.networks.nets.DenseNet(spatial_dims=3, in_channels=1, out_channels=2).to(device)\n","  loss_function = torch.nn.CrossEntropyLoss()\n","  optimizer = torch.optim.Adam(model.parameters(), 1e-4)\n","  auc_metric = ROCAUCMetric()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":352,"status":"ok","timestamp":1649609959840,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"rfTuqU6DJbqG","outputId":"3edddf8c-9eb6-476a-b47b-0104f9e63aa1"},"outputs":[{"name":"stdout","output_type":"stream","text":["<bound method Module.parameters of DenseNet(\n","  (features): Sequential(\n","    (conv0): Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n","    (norm0): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu0): ReLU(inplace=True)\n","    (pool0): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","    (denseblock1): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(96, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition1): _Transition(\n","      (norm): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock2): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition2): _Transition(\n","      (norm): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(512, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock3): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer17): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer18): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer19): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer20): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer21): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer22): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer23): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer24): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition3): _Transition(\n","      (norm): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(1024, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock4): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (norm5): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (class_layers): Sequential(\n","    (relu): ReLU(inplace=True)\n","    (pool): AdaptiveAvgPool3d(output_size=1)\n","    (flatten): Flatten(start_dim=1, end_dim=-1)\n","    (out): Linear(in_features=1024, out_features=2, bias=True)\n","  )\n",")>\n"]}],"source":["print(model.parameters)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Ve31g7LaVSGl","executionInfo":{"status":"error","timestamp":1649617721834,"user_tz":-240,"elapsed":1856920,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"c1421800-9a8c-4492-cd3f-a60641f0e6c5"},"outputs":[{"output_type":"stream","name":"stdout","text":["----------\n","epoch 1 average loss: 0.7352\n","----------\n","epoch 2 average loss: 0.7126\n","saved new best metric model\n","current epoch: 2 current accuracy: 0.2750 current AUC: 0.2137 best accuracy: 0.2750 at epoch 2\n","----------\n","epoch 3 average loss: 0.6895\n","----------\n","epoch 4 average loss: 0.6707\n","saved new best metric model\n","current epoch: 4 current accuracy: 0.3875 current AUC: 0.3262 best accuracy: 0.3875 at epoch 4\n","----------\n","epoch 5 average loss: 0.6344\n","----------\n","epoch 6 average loss: 0.6069\n","current epoch: 6 current accuracy: 0.3750 current AUC: 0.4088 best accuracy: 0.3875 at epoch 4\n","----------\n","epoch 7 average loss: 0.6124\n","----------\n","epoch 8 average loss: 0.5476\n","saved new best metric model\n","current epoch: 8 current accuracy: 0.5250 current AUC: 0.6006 best accuracy: 0.5250 at epoch 8\n","----------\n","epoch 9 average loss: 0.5593\n","----------\n","epoch 10 average loss: 0.5043\n","saved new best metric model\n","current epoch: 10 current accuracy: 0.7500 current AUC: 0.8750 best accuracy: 0.7500 at epoch 10\n","----------\n","epoch 11 average loss: 0.4924\n","----------\n","epoch 12 average loss: 0.4794\n","current epoch: 12 current accuracy: 0.5375 current AUC: 0.8381 best accuracy: 0.7500 at epoch 10\n","----------\n","epoch 13 average loss: 0.4498\n","----------\n","epoch 14 average loss: 0.4226\n","saved new best metric model\n","current epoch: 14 current accuracy: 0.7875 current AUC: 0.8812 best accuracy: 0.7875 at epoch 14\n","----------\n","epoch 15 average loss: 0.3885\n","----------\n","epoch 16 average loss: 0.3740\n","current epoch: 16 current accuracy: 0.7000 current AUC: 0.8556 best accuracy: 0.7875 at epoch 14\n","----------\n","epoch 17 average loss: 0.4509\n","----------\n","epoch 18 average loss: 0.3437\n","current epoch: 18 current accuracy: 0.7625 current AUC: 0.9156 best accuracy: 0.7875 at epoch 14\n","----------\n","epoch 19 average loss: 0.3526\n","----------\n","epoch 20 average loss: 0.3354\n","current epoch: 20 current accuracy: 0.7500 current AUC: 0.8500 best accuracy: 0.7875 at epoch 14\n","----------\n","epoch 21 average loss: 0.3261\n","----------\n","epoch 22 average loss: 0.2711\n","current epoch: 22 current accuracy: 0.7750 current AUC: 0.8569 best accuracy: 0.7875 at epoch 14\n","----------\n","epoch 23 average loss: 0.2582\n","----------\n","epoch 24 average loss: 0.2388\n","saved new best metric model\n","current epoch: 24 current accuracy: 0.8375 current AUC: 0.9113 best accuracy: 0.8375 at epoch 24\n","----------\n","epoch 25 average loss: 0.2185\n","----------\n","epoch 26 average loss: 0.2097\n","current epoch: 26 current accuracy: 0.6875 current AUC: 0.8956 best accuracy: 0.8375 at epoch 24\n","----------\n","epoch 27 average loss: 0.2261\n","----------\n","epoch 28 average loss: 0.2524\n","saved new best metric model\n","current epoch: 28 current accuracy: 0.8625 current AUC: 0.9337 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 29 average loss: 0.1585\n","----------\n","epoch 30 average loss: 0.1390\n","current epoch: 30 current accuracy: 0.5000 current AUC: 0.8950 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 31 average loss: 0.2146\n","----------\n","epoch 32 average loss: 0.1380\n","current epoch: 32 current accuracy: 0.8125 current AUC: 0.9200 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 33 average loss: 0.0952\n","----------\n","epoch 34 average loss: 0.1760\n","current epoch: 34 current accuracy: 0.7125 current AUC: 0.9394 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 35 average loss: 0.1329\n","----------\n","epoch 36 average loss: 0.0857\n","current epoch: 36 current accuracy: 0.8250 current AUC: 0.9425 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 37 average loss: 0.1107\n","----------\n","epoch 38 average loss: 0.1169\n","current epoch: 38 current accuracy: 0.7125 current AUC: 0.8688 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 39 average loss: 0.1226\n","----------\n","epoch 40 average loss: 0.1359\n","current epoch: 40 current accuracy: 0.8250 current AUC: 0.9169 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 41 average loss: 0.0932\n","----------\n","epoch 42 average loss: 0.0644\n","current epoch: 42 current accuracy: 0.7000 current AUC: 0.8731 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 43 average loss: 0.1572\n","----------\n","epoch 44 average loss: 0.0594\n","current epoch: 44 current accuracy: 0.7750 current AUC: 0.8938 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 45 average loss: 0.1366\n","----------\n","epoch 46 average loss: 0.0753\n","current epoch: 46 current accuracy: 0.8125 current AUC: 0.9000 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 47 average loss: 0.0595\n","----------\n","epoch 48 average loss: 0.1727\n","current epoch: 48 current accuracy: 0.7625 current AUC: 0.8975 best accuracy: 0.8625 at epoch 28\n","----------\n","epoch 49 average loss: 0.0952\n","----------\n","epoch 50 average loss: 0.0663\n","current epoch: 50 current accuracy: 0.8250 current AUC: 0.9444 best accuracy: 0.8625 at epoch 28\n","train completed, best_metric: 0.8625 at epoch: 28\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-4886ee8989fa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"train completed, best_metric: {best_metric:.4f} at epoch: {best_metric_epoch}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0mtarget_names\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"SMCI\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"AD\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0mtarget_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtarget_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdigits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0mwriter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'classification_report' is not defined"]}],"source":["# start a typical PyTorch training\n","val_interval = 2\n","best_metric = -1\n","best_metric_epoch = -1\n","writer = SummaryWriter()\n","for epoch in range(50):\n","    print(\"-\" * 10)\n","    #print(f\"epoch {epoch + 1}/{5}\")\n","    model.train()\n","    epoch_loss = 0\n","    step = 0\n","    for batch_data in train_loader:\n","        step += 1\n","        inputs, labels = batch_data[\"img\"].to(device), batch_data[\"label\"].to(device)\n","        optimizer.zero_grad()\n","        outputs = model(inputs.unsqueeze(1))\n","        loss = loss_function(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","        epoch_loss += loss.item()\n","        epoch_len = len(train_ds) // train_loader.batch_size\n","        #print(f\"{step}/{epoch_len}, train_loss: {loss.item():.4f}\")\n","        writer.add_scalar(\"train_loss\", loss.item(), epoch_len * epoch + step)\n","    epoch_loss /= step\n","    print(f\"epoch {epoch + 1} average loss: {epoch_loss:.4f}\")\n","    #epoch_loss_values.append(epoch_loss)\n","    \n","    if (epoch + 1) % val_interval == 0:\n","        model.eval()\n","        with torch.no_grad():\n","            y_pred = torch.tensor([], dtype=torch.float32, device=device)\n","            y = torch.tensor([], dtype=torch.long, device=device)\n","            for val_data in valid_loader:\n","                val_images, val_labels = val_data[\"img\"].to(device), val_data[\"label\"].to(device)\n","                y_pred = torch.cat([y_pred, model(val_images.unsqueeze(1))], dim=0)\n","                y = torch.cat([y, val_labels], dim=0)\n","\n","            acc_value = torch.eq(y_pred.argmax(dim=1), y)\n","            acc_metric = acc_value.sum().item() / len(acc_value)\n","            y_onehot = [post_label(i) for i in decollate_batch(y)]\n","            y_pred_act = [post_pred(i) for i in decollate_batch(y_pred)]\n","            auc_metric(y_pred_act, y_onehot)\n","            auc_result = auc_metric.aggregate()\n","            auc_metric.reset()\n","            del y_pred_act, y_onehot\n","            if acc_metric > best_metric:\n","                A=y\n","                B=y_pred.argmax(dim=1)\n","                best_metric = acc_metric\n","                best_metric_epoch = epoch + 1\n","                torch.save(model.state_dict(), \"/content/drive/MyDrive/DENSENETSMCIvsADbest_metric_model_classification3d_dict.pth\")\n","                print(\"saved new best metric model\")\n","            print(\n","                \"current epoch: {} current accuracy: {:.4f} current AUC: {:.4f} best accuracy: {:.4f} at epoch {}\".format(\n","                    epoch + 1, acc_metric, auc_result, best_metric, best_metric_epoch\n","                )\n","            )\n","            writer.add_scalar(\"val_accuracy\", acc_metric, epoch + 1)\n","print(f\"train completed, best_metric: {best_metric:.4f} at epoch: {best_metric_epoch}\")\n","target_names = [\"SMCI\",\"AD\"]\n","print(classification_report(A.cpu(),B.cpu() ,target_names=target_names,digits=4))\n","writer.close()"]},{"cell_type":"code","source":["target_names = [\"SMCI\",\"AD\"]\n","print(classification_report(A.cpu(),B.cpu() ,target_names=target_names,digits=4))\n","writer.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mpDXFptC5nzb","executionInfo":{"status":"ok","timestamp":1649618094647,"user_tz":-240,"elapsed":360,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"483d6a35-de69-47e0-de58-93b8fbc6d57a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","        SMCI     0.8537    0.8750    0.8642        40\n","          AD     0.8718    0.8500    0.8608        40\n","\n","    accuracy                         0.8625        80\n","   macro avg     0.8627    0.8625    0.8625        80\n","weighted avg     0.8627    0.8625    0.8625        80\n","\n"]}]},{"cell_type":"code","source":["fpr, tpr, _ = roc_curve(A.cpu(), B.cpu())\n","roc_auc = roc_auc_score(A.cpu(), B.cpu())\n","\n","plt.figure(1)\n","plt.plot([0, 1], [0, 1])\n","plt.plot(fpr, tpr, label=\"(Densenet area = {:.3f})\".format(roc_auc))\n","plt.xlabel(\"False positive rate\")\n","plt.ylabel(\"True positive rate\")\n","plt.title(\"ROC curve\")\n","plt.legend(loc=\"best\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"3ZhBVE_wAU9P","executionInfo":{"status":"ok","timestamp":1649619922366,"user_tz":-240,"elapsed":528,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"f7f98a5a-dcda-47c4-9b44-78237665007d"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["cmat = confusion_matrix(A.cpu(),B.cpu())\n","\n","ax = sns.heatmap(cmat, annot=True, cmap='Blues')\n","\n","ax.set_title('Confusion Matrix Stable MCI-29[Label 0],AD-29[Label 1] \\n\\n');\n","ax.set_xlabel('\\nPredicted Values')\n","ax.set_ylabel('Actual Values ');\n","\n","## Ticket labels - List must be in alphabetical order\n","ax.xaxis.set_ticklabels(['False','True'])\n","ax.yaxis.set_ticklabels(['False','True'])\n","\n","## Display the visualization of the Confusion Matrix.\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"19uw8D1vA4cn","executionInfo":{"status":"ok","timestamp":1649620053164,"user_tz":-240,"elapsed":456,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"cb2f2364-62c0-4c8d-a400-72c445466f23"},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":582,"status":"ok","timestamp":1648411088793,"user":{"displayName":"Amit Gupta","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14882055139397387561"},"user_tz":-240},"id":"1LD5Doaqqonh","outputId":"eaaea3b7-0ef8-490e-f2c5-770dc6192749"},"outputs":[{"name":"stdout","output_type":"stream","text":["Sun Mar 27 20:00:24 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla V100-SXM2...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   46C    P0    53W / 300W |   2053MiB / 16160MiB |     95%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":354,"status":"ok","timestamp":1649618181889,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"pn5KWnRv7nhh","outputId":"8c160ded-78ea-4d06-ad26-a3b6e68fab6c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DenseNet(\n","  (features): Sequential(\n","    (conv0): Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n","    (norm0): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu0): ReLU(inplace=True)\n","    (pool0): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","    (denseblock1): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(96, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition1): _Transition(\n","      (norm): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock2): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition2): _Transition(\n","      (norm): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(512, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock3): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer17): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer18): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer19): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer20): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer21): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer22): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer23): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer24): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition3): _Transition(\n","      (norm): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(1024, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock4): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (norm5): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (class_layers): Sequential(\n","    (relu): ReLU(inplace=True)\n","    (pool): AdaptiveAvgPool3d(output_size=1)\n","    (flatten): Flatten(start_dim=1, end_dim=-1)\n","    (out): Linear(in_features=1024, out_features=2, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":46}],"source":["model.load_state_dict(torch.load('/content/drive/MyDrive/DENSENETSMCIvsADbest_metric_model_classification3d_dict.pth'))\n","model.eval()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KW5rFKe3eOHg"},"outputs":[],"source":["y_true = list()\n","y_pred = list()\n","\n","with torch.no_grad():\n","    for test_data in test_loader:\n","        test_images, test_labels = test_data[\"img\"].to(device), test_data[\"label\"].to(device)\n","        pred = model(test_images.unsqueeze(1)).argmax(dim=1)\n","        y_true.append(test_labels.item())\n","        y_pred.append(pred.item())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":575,"status":"ok","timestamp":1649618233533,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"tOKuCe3dg9T4","outputId":"1713f2e6-323b-4e7e-b1ea-d2f6ea9a0948"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","        SMCI     0.9474    0.6207    0.7500        29\n","          AD     0.7179    0.9655    0.8235        29\n","\n","    accuracy                         0.7931        58\n","   macro avg     0.8327    0.7931    0.7868        58\n","weighted avg     0.8327    0.7931    0.7868        58\n","\n"]}],"source":["from sklearn.metrics import classification_report\n","target_names = [\"SMCI\",\"AD\"]\n","print(classification_report(y_true, y_pred,target_names=target_names,digits=4))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"elapsed":812,"status":"ok","timestamp":1649618244742,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"DvQSxBgIhIrO","outputId":"ee0e0631-a614-40c6-a133-7f95fcb36812"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["fpr, tpr, _ = roc_curve(y_true, y_pred)\n","roc_auc = roc_auc_score(y_true, y_pred)\n","\n","plt.figure(1)\n","plt.plot([0, 1], [0, 1])\n","plt.plot(fpr, tpr, label=\"(Densenet area = {:.3f})\".format(roc_auc))\n","plt.xlabel(\"False positive rate\")\n","plt.ylabel(\"True positive rate\")\n","plt.title(\"ROC curve\")\n","plt.legend(loc=\"best\")\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"elapsed":1145,"status":"ok","timestamp":1649618252970,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"_Abw0aPbosFy","outputId":"2d848e24-e56a-4528-93d9-627586258c01"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["cmat = confusion_matrix(y_true, y_pred)\n","\n","import seaborn as sns\n","\n","ax = sns.heatmap(cmat, annot=True, cmap='Blues')\n","\n","ax.set_title('Confusion Matrix Stable MCI-29[Label 0],AD-29[Label 1] \\n\\n');\n","ax.set_xlabel('\\nPredicted Values')\n","ax.set_ylabel('Actual Values ');\n","\n","## Ticket labels - List must be in alphabetical order\n","ax.xaxis.set_ticklabels(['False','True'])\n","ax.yaxis.set_ticklabels(['False','True'])\n","\n","## Display the visualization of the Confusion Matrix.\n","plt.show()\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"machine_shape":"hm","name":"DenseNet Fold-1   SMCI vs AD","provenance":[{"file_id":"1yl08D9WJda9cSY1v3qJEwoqmjVzMGDVK","timestamp":1648382303992},{"file_id":"1W_VhzdsW0ev4YXUdlgWGQVc8FDui_-ti","timestamp":1648355843901},{"file_id":"1WwLS7IvoVpwP2K0cG9HF3BCfim5lWeE-","timestamp":1648347425085},{"file_id":"1aeCVSDGh-GOkorZ5Bl2btjFC2p_kK_k8","timestamp":1648314735073},{"file_id":"1BTjj-YH44tZrTF7rG6y4vREOqyiL3u5W","timestamp":1648302511310},{"file_id":"1jG_r7VUlaeHdfoqDiC5T--PwdnOGDpX7","timestamp":1648292499522},{"file_id":"15j8pYQmvG_UNAnP8JuGzfD8ex_6hxRns","timestamp":1648283104327},{"file_id":"1NE32ZVaen7rQzttzj3osZe7_nXN9QMOy","timestamp":1648201474639},{"file_id":"1TgopIX2tPaVjnXLqi3W4-d6UhVK8nPEJ","timestamp":1648127135930},{"file_id":"1-T7dnfNb8Ib2zGQgpjLivEO2VwMdetwr","timestamp":1648121625144},{"file_id":"1r1lUfWnsJxZnUUPhf_ThH0HE9YscvYcQ","timestamp":1648111248098},{"file_id":"1HYazkOl83bLXhAFo_z0e9UhhR7KIhCdV","timestamp":1648061718205},{"file_id":"10mbf3ronNevgSGamc8CjNo5VuCqaUpgz","timestamp":1648055036787},{"file_id":"1luKbRAAUC-f03yc4j610EoiAHppb68BS","timestamp":1648031793067},{"file_id":"1zP4rEG5G6l4zAqoJ_IZtldeR-Rf9vIAn","timestamp":1644428204089},{"file_id":"11yTaxC3PAGGBVoJ2ggBXxzwKfysLiMF3","timestamp":1644392976089},{"file_id":"1RWGGIVivPPJdbKNKUT_E241L8JQ5spxx","timestamp":1643956276368}],"mount_file_id":"1Uz9WP-CrrnkXZEy_tARR5eySNxhYP1UD","authorship_tag":"ABX9TyPWdOgwh2yPT39ZFT9WROmA"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}