{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"cUJl8Mw0QXoP","executionInfo":{"status":"ok","timestamp":1650286494186,"user_tz":-240,"elapsed":6467,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["import torch\n","import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import roc_curve\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4147,"status":"ok","timestamp":1650286498314,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"NYznFz4FMRll","outputId":"fe518655-d00a-4b46-8931-95ddb18d3c42"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting monai\n","  Downloading monai-0.8.1-202202162213-py3-none-any.whl (721 kB)\n","\u001b[?25l\r\u001b[K     |▌                               | 10 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |█                               | 20 kB 22.3 MB/s eta 0:00:01\r\u001b[K     |█▍                              | 30 kB 8.1 MB/s eta 0:00:01\r\u001b[K     |█▉                              | 40 kB 8.6 MB/s eta 0:00:01\r\u001b[K     |██▎                             | 51 kB 4.6 MB/s eta 0:00:01\r\u001b[K     |██▊                             | 61 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |███▏                            | 71 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |███▋                            | 81 kB 5.7 MB/s eta 0:00:01\r\u001b[K     |████                            | 92 kB 6.3 MB/s eta 0:00:01\r\u001b[K     |████▌                           | 102 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████                           | 112 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 122 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████                          | 133 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 143 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 153 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 163 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 174 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 184 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████▋                       | 194 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████                       | 204 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 215 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 225 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 235 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 245 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 256 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████▉                    | 266 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████▎                   | 276 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 286 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████▏                  | 296 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 307 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 317 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 327 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 337 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 348 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████▉                | 358 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 368 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 378 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 389 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 399 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 409 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 419 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 430 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▌            | 440 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 450 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 460 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████▉           | 471 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 481 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▉          | 491 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 501 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▊         | 512 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 522 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▋        | 532 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 542 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 552 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 563 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 573 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 583 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 593 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▉     | 604 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 614 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▊    | 624 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 634 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 645 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 655 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▌  | 665 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 675 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 686 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 696 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 706 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 716 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 721 kB 5.3 MB/s \n","\u001b[?25hRequirement already satisfied: torch>=1.6 in /usr/local/lib/python3.7/dist-packages (from monai) (1.10.0+cu111)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from monai) (1.21.5)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch>=1.6->monai) (4.1.1)\n","Installing collected packages: monai\n","Successfully installed monai-0.8.1\n"]}],"source":["!pip install monai"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"FlUxE75HMNqI","executionInfo":{"status":"ok","timestamp":1650286500066,"user_tz":-240,"elapsed":1758,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["import monai\n","from monai.data import decollate_batch\n","from monai.metrics import ROCAUCMetric\n","from monai.transforms import ToTensord,EnsureType,LoadImaged\n","from monai.transforms import RandAffined,RandRotated,RandGaussianNoised,Activations, AddChanneld, AsDiscrete, Compose,RandRotate90d, Resized, ScaleIntensityd, EnsureTyped"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"P0aSwEwmleyT","executionInfo":{"status":"ok","timestamp":1650286500067,"user_tz":-240,"elapsed":9,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["x=np.full(160,1) # 1 means AD 160 processes MRI for Training"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1338,"status":"ok","timestamp":1650286501397,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"_Via2mzzs85z","outputId":"8976e807-b661-4896-c5a0-e96f38c6ea44"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/\n"]}],"source":["train_files={}\n","for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/'):\n","  if files:\n","    print(path)    "]},{"cell_type":"code","execution_count":6,"metadata":{"id":"92KqzjRQgnJX","executionInfo":{"status":"ok","timestamp":1650286501397,"user_tz":-240,"elapsed":6,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":[" images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD', f]) for f in files] "]},{"cell_type":"code","execution_count":7,"metadata":{"id":"ZIUb-4BxmS4J","executionInfo":{"status":"ok","timestamp":1650286501397,"user_tz":-240,"elapsed":4,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":[" train_files = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":922,"status":"ok","timestamp":1650286502315,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"2xRqG2ROpU2h","outputId":"4995bb54-7cb3-473c-aefa-e86220557733"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/\n"]}],"source":["train_files_sMCI={}\n","for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/'):\n","  if files:\n","    print(path)\n","   "]},{"cell_type":"code","execution_count":9,"metadata":{"id":"9ezb_wKbpcLb","executionInfo":{"status":"ok","timestamp":1650286502316,"user_tz":-240,"elapsed":22,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["images_sMCI = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN', f]) for f in files]\n"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"o5Ic7GYbl99W","executionInfo":{"status":"ok","timestamp":1650286502317,"user_tz":-240,"elapsed":21,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["y=np.full(160,0) # o means stable MCI "]},{"cell_type":"code","execution_count":11,"metadata":{"id":"A2Wmvm0VqGvC","executionInfo":{"status":"ok","timestamp":1650286502318,"user_tz":-240,"elapsed":21,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["train_files_sMCI = [{\"img\": img, \"label\": label} for img, label in zip(images_sMCI, y)]"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"nu56u0jmn99m","executionInfo":{"status":"ok","timestamp":1650286502318,"user_tz":-240,"elapsed":21,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["train_files.extend(train_files_sMCI)"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1650286502319,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"nXXjXi8moEfu","outputId":"cc222033-88f6-43c8-bfff-77e4257710cf"},"outputs":[{"output_type":"stream","name":"stdout","text":["[{'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0266_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007095334102_S12381_I119390.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0266_MR_MPR__GradWarp__N3__Scaled_Br_20070819154701884_S12381_I68898.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0272_MR_MPR__GradWarp__N3__Scaled_Br_20070819160811308_S12394_I68927.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0310_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007095729372_S12468_I119395.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0310_MR_MPR__GradWarp__N3__Scaled_Br_20070819162315993_S12468_I68944.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0517_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007100124596_S15001_I119399.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0517_MR_MPR__GradWarp__N3__Scaled_Br_20070819165258579_S15001_I68976.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0528_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007100403336_S14629_I119401.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0528_MR_MPR__GradWarp__N3__Scaled_Br_20070821191602878_S14629_I69679.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0740_MR_MPR__GradWarp__N3__Scaled_2_Br_20081007101045669_S17472_I119406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_0740_MR_MPR__GradWarp__N3__Scaled_Br_20070819180306941_S17472_I69048.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_1409_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070821114304781_S33787_I69400.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_128_S_1430_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071030174634532_S39199_I79857.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_130_S_0956_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070210221002388_S20667_I39185.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_130_S_1201_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801182711594_S25082_I63757.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_130_S_1290_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801183629045_S26038_I63766.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_130_S_1337_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070801184528226_S27584_I63775.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_131_S_0319_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070403131044669_S12322_I47984.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_131_S_0457_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080225093858034_S13976_I92406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_131_S_0497_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070403140455408_S15315_I48038.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_131_S_0691_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070403141449754_S17266_I48047.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_133_S_0493_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081007152542589_S14156_I119503.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_133_S_1055_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008100559240_S22386_I119646.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_133_S_1170_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008101107947_S24674_I119651.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_133_S_1170_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080207174424754_S24674_I89957.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0194_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008133147404_S13178_I119717.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0194_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070215183625381_S13178_I40239.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0299_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008133944436_S13839_I119726.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0299_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215202408595_S13839_I40312.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0300_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008134134874_S14136_I119728.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0300_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215205110923_S14136_I40328.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0426_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081008134327484_S14581_I119730.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_136_S_0426_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070215211810806_S14581_I40356.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_0366_MR_MPR__GradWarp__N3__Scaled_Br_20070323161105797_S14199_I46608.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_0438_MR_MPR__GradWarp__N3__Scaled_Br_20070323162337393_S13764_I46615.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_0796_MR_MPR__GradWarp__N3__Scaled_Br_20080207175303986_S18077_I89979.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_0841_MR_MPR__GradWarp__N3__Scaled_Br_20070419175857278_S19351_I49776.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_137_S_1041_MR_MPR-R__GradWarp__N3__Scaled_Br_20070306190902216_S22310_I43071.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_141_S_0696_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071119104836717_S18373_I82738.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_141_S_0790_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080220165919265_S18766_I91253.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_012_S_0803_MR_MPR____N3__Scaled_2_Br_20081001123507114_S19197_I118716.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_012_S_0803_MR_MPR____N3__Scaled_Br_20070711172746366_S19197_I59250.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_0592_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20071028192251104_S18419_I79144.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_0699_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070727182856171_S18366_I62650.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_0996_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426092308209_S22240_I51183.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_1161_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426171211057_S24399_I51485.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_013_S_1205_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426173828172_S25024_I51542.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070212231950856_S12402_I39620.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_014_S_1095_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070320181218511_S23323_I45740.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_016_S_0991_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070217023139686_S21737_I40794.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_016_S_1263_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070804134033886_S27303_I64622.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0286_MR_MPR____N3__Scaled_2_Br_20081001135113951_S12435_I118779.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0286_MR_MPR____N3__Scaled_Br_20070120013124801_S12435_I37007.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0335_MR_MPR____N3__Scaled_2_Br_20081008153133922_S14586_I119801.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0335_MR_MPR____N3__Scaled_Br_20070101214204431_S14586_I35009.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0633_MR_MPR-R____N3__Scaled_2_Br_20081010112443772_S15573_I120057.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0633_MR_MPR-R____N3__Scaled_Br_20070101222816515_S15573_I35036.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0682_MR_MPR____N3__Scaled_2_Br_20081008153234434_S16293_I119802.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_018_S_0682_MR_MPR____N3__Scaled_Br_20070101224115510_S16293_I35044.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_020_S_0213_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070718120158728_S12386_I60600.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20061217125152228_S12836_I33444.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_021_S_0642_MR_MPR__GradWarp__N3__Scaled_Br_20061217130526879_S15935_I33452.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20061217132116005_S17580_I33461.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_021_S_1109_MR_MPR__GradWarp__N3__Scaled_Br_20070727185946236_S23446_I62695.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_022_S_0007_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712142439074_S9024_I59366.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712152611314_S11485_I59484.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_022_S_0219_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712154620604_S12375_I59533.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_022_S_0543_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070712155153926_S14849_I59543.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0083_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001153941224_S10568_I118874.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0083_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061130194138457_S10568_I31143.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0084_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100834283_S10764_I118970.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0084_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20061201102044695_S10764_I31205.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0093_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100757991_S10736_I118969.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0139_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081002100910505_S11079_I118971.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0139_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061201144502375_S11079_I31300.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0916_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001154252419_S19228_I118879.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_0916_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061203142844438_S19228_I31533.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001160410209_S26314_I118923.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070727133707675_S26314_I62433.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_1289_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081001160534628_S26374_I118925.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_023_S_1289_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080207172946284_S26374_I89938.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_024_S_1171_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731172208570_S24659_I63406.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_024_S_1307_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731173131780_S27061_I63415.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_0404_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20061222194841960_S13866_I34204.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_0850_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070412191003564_S18554_I48996.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_1081_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070327152141858_S25357_I47168.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_1082_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070327161431010_S22938_I47204.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070327165452524_S25764_I47228.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_027_S_1385_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070330094058546_S28133_I47574.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_029_S_0836_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070806122937449_S18151_I65013.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_029_S_0999_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070805144703422_S23248_I64898.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070718151433161_S22977_I60741.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_029_S_1184_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070812143109046_S25463_I67210.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_031_S_0321_MR_MPR__GradWarp__N3__Scaled_Br_20070807093706127_S12365_I65383.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_031_S_0554_MR_MPR-R__GradWarp__N3__Scaled_Br_20070804144512116_S14904_I64711.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_031_S_1209_MR_MPR__GradWarp__N3__Scaled_Br_20070813153725713_S25028_I67441.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_0147_MR_MPR____N3__Scaled_2_Br_20081003100226549_S11186_I119079.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20070123192754258_S11186_I37210.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_0400_MR_MPR____N3__Scaled_2_Br_20081003101339687_S13238_I119087.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_0400_MR_MPR____N3__Scaled_Br_20070118000329335_S13238_I36459.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_1037_MR_MPR____N3__Scaled_2_Br_20081003104216708_S22208_I119114.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_1101_MR_MPR____N3__Scaled_2_Br_20081003104506735_S22783_I119116.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_032_S_1101_MR_MPR____N3__Scaled_Br_20070731180142730_S22783_I63442.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121149525_S17337_I119128.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070303125222238_S17337_I42400.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0733_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121546031_S16932_I119132.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0733_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070303133222445_S16932_I42425.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003121834902_S16956_I119135.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070304110859078_S16956_I42441.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_0889_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070426183239887_S19296_I51629.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_1281_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070517161803030_S26136_I54780.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070517162231894_S26144_I54785.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_1285_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070426175923899_S26128_I51588.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_033_S_1308_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070517160021095_S26600_I54752.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_035_S_0341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070319175003745_S12952_I45213.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_036_S_0577_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070119233126708_S14974_I36914.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_036_S_0759_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070120004026768_S18094_I36969.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070209144410346_S18264_I38652.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_036_S_1001_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070209145840163_S22691_I38661.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_037_S_0627_MR_MPR__GradWarp__N3__Scaled_Br_20071030172722998_S16313_I79831.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_041_S_1368_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070806164945601_S27512_I65248.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_041_S_1391_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070730182830112_S29116_I62933.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_041_S_1435_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20071029192425510_S39186_I79636.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_051_S_1296_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070628165536504_S26431_I58022.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_053_S_1044_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003142251021_S21256_I119175.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_053_S_1044_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070802192148921_S21256_I64203.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_057_S_0474_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20061229153747701_S13990_I34720.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_057_S_1371_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070730190858034_S28667_I62998.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_057_S_1373_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070730191448410_S28698_I63008.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_057_S_1379_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070730191813596_S28761_I63014.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_062_S_0535_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070424112744977_S14699_I50426.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_062_S_0690_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070424115325478_S16924_I50468.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_062_S_0730_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070424120556863_S17062_I50487.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_062_S_0793_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070424123729148_S18189_I50524.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0029_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003155128312_S9904_I119180.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0029_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070209160613449_S9904_I38717.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0076_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003155813843_S10468_I119190.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0076_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070111012139914_S10468_I35911.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0110_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003160054331_S11177_I119194.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0828_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081003161047536_S18532_I119205.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_0828_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070807174227674_S18532_I65716.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_1185_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731111102788_S24635_I63104.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_067_S_1253_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070522143031075_S27558_I55033.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_068_S_0109_MR_MPR____N3__Scaled_2_Br_20081212141712788_S10772_I130231.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_068_S_0109_MR_MPR____N3__Scaled_Br_20070731181048264_S10772_I63454.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_068_S_1191_MR_MPR____N3__Scaled_Br_20071103125754305_S25451_I80645.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_073_S_0565_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081006105531714_S15762_I119234.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_073_S_0565_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070213213329963_S15762_I39919.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_082_S_0304_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_2_Br_20081006113122746_S12557_I119236.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_082_S_0761_MR_MPR__GradWarp__B1_Correction__N3__Scaled_2_Br_20081006113707423_S18119_I119244.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_082_S_1079_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070418082140556_S22650_I49490.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_082_S_1377_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070731115515322_S28495_I63170.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1027_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070418084102408_S21207_I49527.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1090_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731120023063_S23375_I63176.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1102_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070731121241229_S22905_I63186.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1164_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070812144323362_S23871_I67223.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1397_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080307104443256_S31011_I95662.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_094_S_1402_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20070808191131320_S32102_I66078.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_098_S_0149_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080206083054086_S11021_I89429.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/AD/ADNI_098_S_0884_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20070605153002130_S24183_I56026.nii', 'label': 1}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI093-HH-1359-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI094-HH-1355-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI095-HH-1390-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI096-HH-1391-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI097-HH-1619-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI098-Guys-0745-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI099-Guys-0748-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI100-Guys-0747-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI101-Guys-0749-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI102-HH-1416-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI103-Guys-0750-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI104-HH-1450-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI105-HH-1471-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI106-Guys-0760-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI107-Guys-0761-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI108-Guys-0865-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI109-Guys-0732-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI110-Guys-0733-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI111-Guys-0734-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI112-Guys-0735-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI113-Guys-0776-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI114-Guys-0737-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI115-Guys-0738-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI116-Guys-0739-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI117-Guys-0763-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI118-Guys-0764-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI119-Guys-0765-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI120-Guys-0766-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI121-Guys-0772-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI122-Guys-0773-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI123-Guys-0774-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI126-HH-1437-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI127-HH-1451-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI128-HH-1470-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI129-Guys-0775-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI130-HH-1528-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI131-HH-1527-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI132-HH-1415-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI134-Guys-0780-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI135-Guys-0779-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI136-HH-1452-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI137-HH-1472-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI138-Guys-0746-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI139-Guys-0815-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI140-Guys-0787-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI141-Guys-0789-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI142-Guys-0786-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI143-Guys-0785-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI144-Guys-0788-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI145-Guys-0781-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI146-HH-1389-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI148-HH-1453-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI150-HH-1550-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI151-Guys-0793-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI153-Guys-0782-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI154-Guys-0821-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI156-Guys-0837-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI157-Guys-0816-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI158-Guys-0783-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI159-HH-1549-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI160-HH-1637-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI161-HH-2533-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI162-HH-1548-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI163-HH-1621-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI164-Guys-0844-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI165-HH-1589-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI166-Guys-0846-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI167-HH-1569-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI168-HH-1607-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI169-Guys-0842-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI170-Guys-0843-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI172-Guys-0982-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI173-HH-1590-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI174-HH-1571-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI175-HH-1570-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI176-HH-1604-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI177-Guys-0831-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI178-Guys-0778-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI179-Guys-0777-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI180-HH-1605-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI181-Guys-0790-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI182-Guys-0792-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI183-Guys-0791-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI184-Guys-0794-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI185-Guys-0795-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI186-Guys-0796-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI188-Guys-0798-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI189-Guys-0799-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI191-Guys-0801-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI192-Guys-0878-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI193-Guys-0810-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI194-Guys-0818-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI195-HH-1620-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI196-Guys-0805-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI197-Guys-0811-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI198-Guys-0803-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI199-Guys-0802-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI200-Guys-0812-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI201-HH-1588-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI202-HH-1526-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI204-HH-1651-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI205-HH-1649-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI206-HH-1650-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI207-Guys-0809-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI208-Guys-0808-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI209-Guys-0804-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI210-Guys-0856-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI211-HH-1568-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI212-HH-1643-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI213-HH-1642-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI214-HH-1636-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI216-HH-1635-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI217-HH-1638-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI218-HH-1815-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI219-Guys-0894-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI221-HH-1606-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI222-Guys-0819-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI223-Guys-0830-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI224-Guys-0823-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI225-Guys-0832-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI002-Guys-0828-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI012-HH-1211-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI013-HH-1212-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI014-HH-1236-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI015-HH-1258-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI016-Guys-0697-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI017-Guys-0698-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI019-Guys-0702-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI020-Guys-0700-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI021-Guys-0703-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI022-Guys-0701-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI023-Guys-0699-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI024-Guys-0705-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI025-Guys-0852-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI026-Guys-0696-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI027-Guys-0710-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI028-Guys-1038-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI029-Guys-0829-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI030-Guys-0708-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI031-Guys-0797-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI033-HH-1259-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI034-HH-1260-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI035-IOP-0873-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI036-Guys-0736-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI037-Guys-0704-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI038-Guys-0729-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI039-HH-1261-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI040-Guys-0724-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI041-Guys-0706-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI042-Guys-0725-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI043-Guys-0714-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI044-Guys-0712-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI045-Guys-0713-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI046-Guys-0824-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI048-HH-1326-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI049-HH-1358-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI050-Guys-0711-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI052-HH-1343-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI230-IOP-0869-T1.nii.gz', 'label': 0}, {'img': '/content/drive/MyDrive/MCI MODEL-3 DATA/Train/CN/IXI231-IOP-0866-T1.nii.gz', 'label': 0}]\n"]}],"source":["print(train_files)"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"_-tQmulsLAFi","executionInfo":{"status":"ok","timestamp":1650286502320,"user_tz":-240,"elapsed":14,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["  train_transforms = Compose(\n","        [\n","            LoadImaged(keys=[\"img\"]),\n","            #AddChanneld(keys=[\"img\"]),\n","            #RandAffined(keys=['img'], prob=0.5, translate_range=10), \n","            #RandRotated(keys=['img'], prob=0.6, range_x=10.0),\n","            #RandGaussianNoised(keys='img', prob=0.5),\n","            #ToTensord(keys=[\"img\"]),\n","        ]\n","    )"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"w2dtOA-uRVYG","executionInfo":{"status":"ok","timestamp":1650286502320,"user_tz":-240,"elapsed":13,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["post_pred = Compose([EnsureType(), Activations(softmax=True)])\n","post_label = Compose([EnsureType(), AsDiscrete(to_onehot=2)])\n"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"LwPcqiDsUBkD","executionInfo":{"status":"ok","timestamp":1650286502321,"user_tz":-240,"elapsed":13,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["from torch.utils.data import DataLoader\n","from torch.utils.tensorboard import SummaryWriter"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"N4Mqm0grS1EO","executionInfo":{"status":"ok","timestamp":1650286502322,"user_tz":-240,"elapsed":13,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["#check_ds = monai.data.Dataset(data=train_files, transform=train_transforms)\n","#check_loader = DataLoader(check_ds, batch_size=4, num_workers=4, pin_memory=torch.cuda.is_available())\n","#check_data = monai.utils.misc.first(check_loader)\n","#print(check_data[\"img\"].shape, check_data[\"label\"])\n"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"iVsZ9Mx6oeN7","executionInfo":{"status":"ok","timestamp":1650286502837,"user_tz":-240,"elapsed":528,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["# create a training data loader\n","train_ds = monai.data.Dataset(data=train_files, transform=train_transforms)\n","train_loader = DataLoader(train_ds, batch_size=2, shuffle=True, num_workers=4, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1650286502837,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"coRjr9lk0pip","outputId":"1d29b736-4881-4a70-daad-46388353ca1d"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/AD/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/AD/'):\n","  if files:\n","    print(path)    "]},{"cell_type":"code","execution_count":20,"metadata":{"id":"Bb1UmOqp2Mzo","executionInfo":{"status":"ok","timestamp":1650286503534,"user_tz":-240,"elapsed":18,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["x=np.full(40,1)"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"U1t6ApKc3z3C","executionInfo":{"status":"ok","timestamp":1650286503535,"user_tz":-240,"elapsed":17,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/AD', f]) for f in files] "]},{"cell_type":"code","execution_count":22,"metadata":{"id":"cZFZIBmE4diO","executionInfo":{"status":"ok","timestamp":1650286503535,"user_tz":-240,"elapsed":16,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["valid_files = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1650286503535,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"j3ruNdWQ6efP","outputId":"89321a45-3c47-41c8-ace8-01408611f42e"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/CN/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/CN/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"CPeztrsB6k-V","executionInfo":{"status":"ok","timestamp":1650286503536,"user_tz":-240,"elapsed":12,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["x=np.full(40,0)"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"Zwshfucp6pey","executionInfo":{"status":"ok","timestamp":1650286503536,"user_tz":-240,"elapsed":11,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-3 DATA/Valid/CN', f]) for f in files] "]},{"cell_type":"code","execution_count":26,"metadata":{"id":"tTnjUbZW6yuZ","executionInfo":{"status":"ok","timestamp":1650286503536,"user_tz":-240,"elapsed":11,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["valid_files_sMCI = [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"ZxDNtMH97eOE","executionInfo":{"status":"ok","timestamp":1650286503537,"user_tz":-240,"elapsed":11,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["valid_files.extend(valid_files_sMCI)"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"U5VuoLnM7pfM","executionInfo":{"status":"ok","timestamp":1650286503537,"user_tz":-240,"elapsed":11,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["#check_ds = monai.data.Dataset(data=valid_files, transform=train_transforms)\n","#check_loader = DataLoader(check_ds, batch_size=8, num_workers=4, pin_memory=torch.cuda.is_available())\n","#check_data = monai.utils.misc.first(check_loader)\n","#print(check_data[\"img\"].shape, check_data[\"label\"])"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"qVKSOKbw7296","executionInfo":{"status":"ok","timestamp":1650286503538,"user_tz":-240,"elapsed":11,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["# create a validation data loader\n","valid_ds = monai.data.Dataset(data=valid_files, transform=train_transforms)\n","valid_loader = DataLoader(valid_ds, batch_size=2,shuffle=True,num_workers=4, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":30,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":588,"status":"ok","timestamp":1650286504115,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"w59RYjFHM4s9","outputId":"08b03be7-ffed-496c-d6f9-ed67464e765b"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"PxrcqmvMNAi9","executionInfo":{"status":"ok","timestamp":1650286504116,"user_tz":-240,"elapsed":13,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["x=np.full(45,1)"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"50fO8lN-NNXk","executionInfo":{"status":"ok","timestamp":1650286504116,"user_tz":-240,"elapsed":12,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD', f]) for f in files] "]},{"cell_type":"markdown","metadata":{"id":"HHl3YGjoqFhG"},"source":[""]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1650286504117,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"BhuE2IwePDBJ","outputId":"491ff991-26f0-49e3-c301-a54d8a3ab037"},"outputs":[{"output_type":"stream","name":"stdout","text":["['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_002_S_0938_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081104151647760_S58211_I125155.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_002_S_1018_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081224104711856_S60832_I132197.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_005_S_0221_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080501163219594_S49279_I104489.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_005_S_1341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090701135215664_S65452_I147406.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_007_S_1339_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721101114129_S67376_I149749.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_010_S_0786_MR_MPR____N3__Scaled_Br_20100105142259322_S58426_I162100.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_010_S_0829_MR_MPR____N3__Scaled_Br_20090227152103934_S62987_I137223.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080516095357795_S49746_I105878.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_016_S_0991_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721103719643_S66595_I149771.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20080515114721734_S49511_I105737.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20090127130302490_S57137_I134624.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080229153509900_S45881_I94405.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_023_S_0084_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080224132527438_S44784_I92169.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090512151630340_S64537_I143676.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_027_S_1082_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081229144920056_S60862_I132368.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090316152042654_S63689_I139062.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090223154912775_S61415_I136737.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20080421171040104_S47745_I103333.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081023111433234_S55321_I123024.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081026130730923_S56031_I123722.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317134835050_S63547_I139235.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_033_S_1308_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317140629096_S63613_I139266.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081028132916623_S57028_I124258.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_041_S_1368_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090513123110219_S64654_I143723.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_057_S_1371_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514101747514_S66427_I143792.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_057_S_1379_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514103130382_S66419_I143815.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_062_S_0535_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080702154348870_S51763_I112301.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_062_S_0730_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081023151703543_S54793_I123220.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_062_S_0793_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081230153105872_S60719_I132424.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_067_S_0076_MR_MPR__GradWarp__N3__Scaled_Br_20090113143434713_S57777_I133486.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_068_S_0109_MR_MPR____N3__Scaled_Br_20080414160306136_S47738_I102511.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_073_S_0565_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081027091402842_S55114_I123926.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_094_S_1164_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090217155439187_S62803_I136220.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_098_S_0149_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080223171535343_S44911_I91891.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_099_S_1144_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090204190508382_S62245_I135299.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_109_S_1157_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20091214142720527_S65805_I160876.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_116_S_0370_MR_MPR__GradWarp__N3__Scaled_Br_20080522134715771_S49840_I106529.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_123_S_0091_MR_MPR____N3__Scaled_Br_20080223174718151_S44614_I91935.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_123_S_0094_MR_MPR-R____N3__Scaled_Br_20080223175253233_S44624_I91942.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_126_S_0891_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081027142509323_S56885_I124156.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_126_S_1221_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090217161856142_S62792_I136241.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_127_S_0844_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081209113459069_S60062_I129620.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_127_S_1382_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090721114554064_S66581_I149834.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_131_S_0457_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080702162258576_S51679_I112366.nii', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_131_S_0497_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081024092147063_S53628_I123416.nii']\n"]}],"source":["print(images)"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"UbezDmYZNdU-","executionInfo":{"status":"ok","timestamp":1650286504117,"user_tz":-240,"elapsed":10,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["test_files= [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1650286504118,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"bBuIqGtpnS8V","outputId":"6e2165cf-b17e-4e28-f445-5eac97ee8101"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_002_S_0938_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081104151647760_S58211_I125155.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_002_S_1018_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081224104711856_S60832_I132197.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_005_S_0221_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080501163219594_S49279_I104489.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_005_S_1341_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090701135215664_S65452_I147406.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_007_S_1339_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721101114129_S67376_I149749.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_010_S_0786_MR_MPR____N3__Scaled_Br_20100105142259322_S58426_I162100.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_010_S_0829_MR_MPR____N3__Scaled_Br_20090227152103934_S62987_I137223.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_014_S_0328_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080516095357795_S49746_I105878.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_016_S_0991_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090721103719643_S66595_I149771.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_021_S_0343_MR_MPR__GradWarp__N3__Scaled_Br_20080515114721734_S49511_I105737.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_021_S_0753_MR_MPR__GradWarp__N3__Scaled_Br_20090127130302490_S57137_I134624.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_022_S_0129_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080229153509900_S45881_I94405.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_023_S_0084_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080224132527438_S44784_I92169.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_023_S_1262_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090512151630340_S64537_I143676.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_027_S_1082_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081229144920056_S60862_I132368.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_027_S_1254_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090316152042654_S63689_I139062.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_029_S_1056_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090223154912775_S61415_I136737.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_032_S_0147_MR_MPR____N3__Scaled_Br_20080421171040104_S47745_I103333.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_033_S_0724_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081023111433234_S55321_I123024.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_033_S_0739_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081026130730923_S56031_I123722.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_033_S_1283_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317134835050_S63547_I139235.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_033_S_1308_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090317140629096_S63613_I139266.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_036_S_0760_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081028132916623_S57028_I124258.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_041_S_1368_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090513123110219_S64654_I143723.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_057_S_1371_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514101747514_S66427_I143792.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_057_S_1379_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090514103130382_S66419_I143815.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_062_S_0535_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080702154348870_S51763_I112301.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_062_S_0730_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081023151703543_S54793_I123220.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_062_S_0793_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081230153105872_S60719_I132424.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_067_S_0076_MR_MPR__GradWarp__N3__Scaled_Br_20090113143434713_S57777_I133486.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_068_S_0109_MR_MPR____N3__Scaled_Br_20080414160306136_S47738_I102511.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_073_S_0565_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20081027091402842_S55114_I123926.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_094_S_1164_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090217155439187_S62803_I136220.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_098_S_0149_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20080223171535343_S44911_I91891.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_099_S_1144_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090204190508382_S62245_I135299.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_109_S_1157_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20091214142720527_S65805_I160876.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_116_S_0370_MR_MPR__GradWarp__N3__Scaled_Br_20080522134715771_S49840_I106529.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_123_S_0091_MR_MPR____N3__Scaled_Br_20080223174718151_S44614_I91935.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_123_S_0094_MR_MPR-R____N3__Scaled_Br_20080223175253233_S44624_I91942.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_126_S_0891_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081027142509323_S56885_I124156.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_126_S_1221_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20090217161856142_S62792_I136241.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_127_S_0844_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081209113459069_S60062_I129620.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_127_S_1382_MR_MPR-R__GradWarp__B1_Correction__N3__Scaled_Br_20090721114554064_S66581_I149834.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_131_S_0457_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20080702162258576_S51679_I112366.nii',\n","  'label': 1},\n"," {'img': '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/AD/ADNI_131_S_0497_MR_MPR__GradWarp__B1_Correction__N3__Scaled_Br_20081024092147063_S53628_I123416.nii',\n","  'label': 1}]"]},"metadata":{},"execution_count":35}],"source":["test_files"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":309,"status":"ok","timestamp":1650286504420,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"BTX-NshNN67U","outputId":"b9b1d47b-e320-47b5-9cd2-5994f757b8d1"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/\n"]}],"source":["for path,dirs,files in os.walk('/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/'):\n","  if files:\n","    print(path)"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"V3Mx0BFpOgxK","executionInfo":{"status":"ok","timestamp":1650286504421,"user_tz":-240,"elapsed":9,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["x=np.full(45,0)"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"WNTSkpIjOj2w","executionInfo":{"status":"ok","timestamp":1650286504422,"user_tz":-240,"elapsed":9,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["images = [os.sep.join(['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN', f]) for f in files] "]},{"cell_type":"markdown","metadata":{"id":"vTGEiVvEJADY"},"source":[""]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1650286504422,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"Ozj2euWTPdpY","outputId":"7d840e39-60b1-4505-ef0d-29ac28b2df25"},"outputs":[{"output_type":"stream","name":"stdout","text":["['/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI286-Guys-0859-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI287-Guys-0863-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI288-Guys-0879-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI289-Guys-0864-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI290-IOP-0874-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI291-IOP-0882-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI292-IOP-0877-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI293-IOP-0876-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI294-IOP-0868-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI295-HH-1814-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI296-HH-1970-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI297-Guys-0886-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI298-Guys-0861-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI299-Guys-0893-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI300-Guys-0880-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI302-HH-1883-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI303-IOP-0968-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI304-Guys-0862-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI305-IOP-0871-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI306-IOP-0867-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI307-IOP-0872-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI308-Guys-0884-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI309-IOP-0897-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI310-IOP-0890-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI311-Guys-0885-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI312-Guys-0887-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI313-HH-2241-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI314-IOP-0889-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI315-IOP-0888-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI316-HH-1862-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI317-Guys-0896-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI318-Guys-0895-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI319-Guys-0901-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI320-Guys-0902-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI321-Guys-0903-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI322-IOP-0891-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI324-Guys-0922-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI325-Guys-0911-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI326-Guys-0907-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI327-HH-1999-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI328-HH-2295-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI329-HH-1908-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI330-Guys-0881-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI332-IOP-1134-T1.nii.gz', '/content/drive/MyDrive/MCI MODEL-1 DATA/Test/CN/IXI333-IOP-0926-T1.nii.gz']\n"]}],"source":["print(images)"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"l-fmwiL9Pmdt","executionInfo":{"status":"ok","timestamp":1650286504423,"user_tz":-240,"elapsed":7,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["test_files_sMCI= [{\"img\": img, \"label\": label} for img, label in zip(images, x)]"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"OU_zrGhaPwJF","executionInfo":{"status":"ok","timestamp":1650286504423,"user_tz":-240,"elapsed":7,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["test_files.extend(test_files_sMCI)"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"BSkM4T7KP_9_","executionInfo":{"status":"ok","timestamp":1650286504423,"user_tz":-240,"elapsed":6,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["# create a test data loader\n","test_ds = monai.data.Dataset(data=test_files, transform=train_transforms)\n","test_loader = DataLoader(test_ds, batch_size=1, shuffle=True, num_workers=1, pin_memory=torch.cuda.is_available())"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"0jRFNQcxJUOf","executionInfo":{"status":"ok","timestamp":1650286513682,"user_tz":-240,"elapsed":9265,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["  #from monai.networks.nets.efficientnet import EfficientNetBN\n","  device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","  #model=EfficientNetBN(\"efficientnet-b1\",spatial_dims=3, in_channels=1, num_classes=2).to(device)\n","  model = monai.networks.nets.DenseNet(spatial_dims=3, in_channels=1, out_channels=2).to(device)\n","  loss_function = torch.nn.CrossEntropyLoss()\n","  optimizer = torch.optim.Adam(model.parameters(), 1e-4)\n","  auc_metric = ROCAUCMetric()"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1650286513683,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"},"user_tz":-240},"id":"rfTuqU6DJbqG","outputId":"36db19dd-dc0d-4598-f46e-94cd918fda41"},"outputs":[{"output_type":"stream","name":"stdout","text":["<bound method Module.parameters of DenseNet(\n","  (features): Sequential(\n","    (conv0): Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n","    (norm0): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu0): ReLU(inplace=True)\n","    (pool0): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","    (denseblock1): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(96, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition1): _Transition(\n","      (norm): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock2): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition2): _Transition(\n","      (norm): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(512, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock3): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer17): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer18): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer19): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer20): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer21): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer22): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer23): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer24): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition3): _Transition(\n","      (norm): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(1024, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock4): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (norm5): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (class_layers): Sequential(\n","    (relu): ReLU(inplace=True)\n","    (pool): AdaptiveAvgPool3d(output_size=1)\n","    (flatten): Flatten(start_dim=1, end_dim=-1)\n","    (out): Linear(in_features=1024, out_features=2, bias=True)\n","  )\n",")>\n"]}],"source":["print(model.parameters)"]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ve31g7LaVSGl","executionInfo":{"status":"ok","timestamp":1650294208577,"user_tz":-240,"elapsed":2081144,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"d895c029-668e-4bb9-98a3-11e53e0e6e53"},"outputs":[{"output_type":"stream","name":"stdout","text":["----------\n","epoch 1 average loss: 0.5257\n","----------\n","epoch 2 average loss: 0.3376\n","saved new best metric model\n","current epoch: 2 current accuracy: 0.9375 current AUC: 1.0000 best accuracy: 0.9375 at epoch 2\n","----------\n","epoch 3 average loss: 0.1862\n","----------\n","epoch 4 average loss: 0.1911\n","saved new best metric model\n","current epoch: 4 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 5 average loss: 0.1141\n","----------\n","epoch 6 average loss: 0.0960\n","current epoch: 6 current accuracy: 0.8875 current AUC: 0.9862 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 7 average loss: 0.1115\n","----------\n","epoch 8 average loss: 0.0585\n","current epoch: 8 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 9 average loss: 0.0390\n","----------\n","epoch 10 average loss: 0.1024\n","current epoch: 10 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 11 average loss: 0.0988\n","----------\n","epoch 12 average loss: 0.0341\n","current epoch: 12 current accuracy: 0.6750 current AUC: 0.8444 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 13 average loss: 0.0482\n","----------\n","epoch 14 average loss: 0.0350\n","current epoch: 14 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 15 average loss: 0.0226\n","----------\n","epoch 16 average loss: 0.0119\n","current epoch: 16 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 17 average loss: 0.0057\n","----------\n","epoch 18 average loss: 0.0038\n","current epoch: 18 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 19 average loss: 0.0034\n","----------\n","epoch 20 average loss: 0.0029\n","current epoch: 20 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 21 average loss: 0.0027\n","----------\n","epoch 22 average loss: 0.0281\n","current epoch: 22 current accuracy: 0.5000 current AUC: 0.9906 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 23 average loss: 0.0824\n","----------\n","epoch 24 average loss: 0.0605\n","current epoch: 24 current accuracy: 0.5375 current AUC: 0.9975 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 25 average loss: 0.0367\n","----------\n","epoch 26 average loss: 0.0149\n","current epoch: 26 current accuracy: 0.9625 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 27 average loss: 0.0353\n","----------\n","epoch 28 average loss: 0.0048\n","current epoch: 28 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 29 average loss: 0.0025\n","----------\n","epoch 30 average loss: 0.0020\n","current epoch: 30 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 31 average loss: 0.0039\n","----------\n","epoch 32 average loss: 0.0487\n","current epoch: 32 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 33 average loss: 0.0031\n","----------\n","epoch 34 average loss: 0.0021\n","current epoch: 34 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 35 average loss: 0.0020\n","----------\n","epoch 36 average loss: 0.0015\n","current epoch: 36 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 37 average loss: 0.0012\n","----------\n","epoch 38 average loss: 0.0009\n","current epoch: 38 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 39 average loss: 0.0009\n","----------\n","epoch 40 average loss: 0.0010\n","current epoch: 40 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 41 average loss: 0.0008\n","----------\n","epoch 42 average loss: 0.0006\n","current epoch: 42 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 43 average loss: 0.0007\n","----------\n","epoch 44 average loss: 0.0006\n","current epoch: 44 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 45 average loss: 0.0005\n","----------\n","epoch 46 average loss: 0.0004\n","current epoch: 46 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 47 average loss: 0.0004\n","----------\n","epoch 48 average loss: 0.0003\n","current epoch: 48 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","----------\n","epoch 49 average loss: 0.0003\n","----------\n","epoch 50 average loss: 0.0003\n","current epoch: 50 current accuracy: 1.0000 current AUC: 1.0000 best accuracy: 1.0000 at epoch 4\n","train completed, best_metric: 1.0000 at epoch: 4\n","              precision    recall  f1-score   support\n","\n","        SMCI     1.0000    1.0000    1.0000        40\n","          AD     1.0000    1.0000    1.0000        40\n","\n","    accuracy                         1.0000        80\n","   macro avg     1.0000    1.0000    1.0000        80\n","weighted avg     1.0000    1.0000    1.0000        80\n","\n"]}],"source":["# start a typical PyTorch training\n","val_interval = 2\n","best_metric = -1\n","best_metric_epoch = -1\n","writer = SummaryWriter()\n","for epoch in range(50):\n","    print(\"-\" * 10)\n","    #print(f\"epoch {epoch + 1}/{5}\")\n","    model.train()\n","    epoch_loss = 0\n","    step = 0\n","    for batch_data in train_loader:\n","        step += 1\n","        inputs, labels = batch_data[\"img\"].to(device), batch_data[\"label\"].to(device)\n","        optimizer.zero_grad()\n","        outputs = model(inputs.unsqueeze(1))\n","        loss = loss_function(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","        epoch_loss += loss.item()\n","        epoch_len = len(train_ds) // train_loader.batch_size\n","        #print(f\"{step}/{epoch_len}, train_loss: {loss.item():.4f}\")\n","        writer.add_scalar(\"train_loss\", loss.item(), epoch_len * epoch + step)\n","    epoch_loss /= step\n","    print(f\"epoch {epoch + 1} average loss: {epoch_loss:.4f}\")\n","    #epoch_loss_values.append(epoch_loss)\n","    \n","    if (epoch + 1) % val_interval == 0:\n","        model.eval()\n","        with torch.no_grad():\n","            y_pred = torch.tensor([], dtype=torch.float32, device=device)\n","            y = torch.tensor([], dtype=torch.long, device=device)\n","            for val_data in valid_loader:\n","                val_images, val_labels = val_data[\"img\"].to(device), val_data[\"label\"].to(device)\n","                y_pred = torch.cat([y_pred, model(val_images.unsqueeze(1))], dim=0)\n","                y = torch.cat([y, val_labels], dim=0)\n","\n","            acc_value = torch.eq(y_pred.argmax(dim=1), y)\n","            acc_metric = acc_value.sum().item() / len(acc_value)\n","            y_onehot = [post_label(i) for i in decollate_batch(y)]\n","            y_pred_act = [post_pred(i) for i in decollate_batch(y_pred)]\n","            auc_metric(y_pred_act, y_onehot)\n","            auc_result = auc_metric.aggregate()\n","            auc_metric.reset()\n","            del y_pred_act, y_onehot\n","            if acc_metric > best_metric:\n","                A=y\n","                B=y_pred.argmax(dim=1)\n","                best_metric = acc_metric\n","                best_metric_epoch = epoch + 1\n","                torch.save(model.state_dict(), \"/content/drive/MyDrive/F3DENSENETADvsCNbest_metric_model_classification3d_dict.pth\")\n","                print(\"saved new best metric model\")\n","            print(\n","                \"current epoch: {} current accuracy: {:.4f} current AUC: {:.4f} best accuracy: {:.4f} at epoch {}\".format(\n","                    epoch + 1, acc_metric, auc_result, best_metric, best_metric_epoch\n","                )\n","            )\n","            writer.add_scalar(\"val_accuracy\", acc_metric, epoch + 1)\n","print(f\"train completed, best_metric: {best_metric:.4f} at epoch: {best_metric_epoch}\")\n","target_names = [\"SMCI\",\"AD\"]\n","print(classification_report(A.cpu(),B.cpu() ,target_names=target_names,digits=4))\n","writer.close()"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mpDXFptC5nzb","executionInfo":{"status":"ok","timestamp":1650294208579,"user_tz":-240,"elapsed":11,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"aac5d1ed-7b47-41fd-9d3e-222d1dfbfa72"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","          CN     1.0000    1.0000    1.0000        40\n","          AD     1.0000    1.0000    1.0000        40\n","\n","    accuracy                         1.0000        80\n","   macro avg     1.0000    1.0000    1.0000        80\n","weighted avg     1.0000    1.0000    1.0000        80\n","\n"]}],"source":["target_names = [\"CN\",\"AD\"]\n","print(classification_report(A.cpu(),B.cpu() ,target_names=target_names,digits=4))\n","writer.close()"]},{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"3ZhBVE_wAU9P","executionInfo":{"status":"ok","timestamp":1650294208580,"user_tz":-240,"elapsed":6,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"00079645-f66d-4ad4-de65-be59ed55e8cb"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["fpr, tpr, _ = roc_curve(A.cpu(), B.cpu())\n","roc_auc = roc_auc_score(A.cpu(), B.cpu())\n","\n","plt.figure(1)\n","plt.plot([0, 1], [0, 1])\n","plt.plot(fpr, tpr, label=\"(Densenet area = {:.3f})\".format(roc_auc))\n","plt.xlabel(\"False positive rate\")\n","plt.ylabel(\"True positive rate\")\n","plt.title(\"ROC curve\")\n","plt.legend(loc=\"best\")\n","plt.show()"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"19uw8D1vA4cn","executionInfo":{"status":"ok","timestamp":1650294208972,"user_tz":-240,"elapsed":396,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"f256be24-52d8-401c-f5c9-1c0c65871ed8"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["cmat = confusion_matrix(A.cpu(),B.cpu())\n","\n","ax = sns.heatmap(cmat, annot=True, cmap='Blues')\n","\n","ax.set_title('Confusion Matrix \\n\\n');\n","ax.set_xlabel('\\nPredicted Values')\n","ax.set_ylabel('Actual Values ');\n","\n","## Ticket labels - List must be in alphabetical order\n","ax.xaxis.set_ticklabels(['False','True'])\n","ax.yaxis.set_ticklabels(['False','True'])\n","\n","## Display the visualization of the Confusion Matrix.\n","plt.show()\n"]},{"cell_type":"code","execution_count":49,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1LD5Doaqqonh","executionInfo":{"status":"ok","timestamp":1650294208973,"user_tz":-240,"elapsed":15,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"e39fbcc7-8eae-48f7-aecc-995e2c7030df"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Apr 18 15:03:29 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   70C    P0    51W / 250W |   9173MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi "]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pn5KWnRv7nhh","executionInfo":{"status":"ok","timestamp":1650294209491,"user_tz":-240,"elapsed":520,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"5d8defdd-e166-4b3f-fe94-790b306ba26e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DenseNet(\n","  (features): Sequential(\n","    (conv0): Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n","    (norm0): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu0): ReLU(inplace=True)\n","    (pool0): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","    (denseblock1): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(96, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition1): _Transition(\n","      (norm): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock2): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(160, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(192, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(224, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition2): _Transition(\n","      (norm): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(512, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock3): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(288, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(320, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(352, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(416, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(448, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(480, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer17): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer18): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer19): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer20): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer21): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer22): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer23): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer24): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (transition3): _Transition(\n","      (norm): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv): Conv3d(1024, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","      (pool): AvgPool3d(kernel_size=2, stride=2, padding=0)\n","    )\n","    (denseblock4): _DenseBlock(\n","      (denselayer1): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer2): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(544, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer3): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(576, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer4): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(608, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer5): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(640, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer6): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(672, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer7): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(704, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer8): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(736, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer9): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(768, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer10): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(800, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer11): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(832, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer12): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(864, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer13): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(896, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer14): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(928, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer15): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(960, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","      (denselayer16): _DenseLayer(\n","        (layers): Sequential(\n","          (norm1): BatchNorm3d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu1): ReLU(inplace=True)\n","          (conv1): Conv3d(992, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n","          (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (relu2): ReLU(inplace=True)\n","          (conv2): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n","        )\n","      )\n","    )\n","    (norm5): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (class_layers): Sequential(\n","    (relu): ReLU(inplace=True)\n","    (pool): AdaptiveAvgPool3d(output_size=1)\n","    (flatten): Flatten(start_dim=1, end_dim=-1)\n","    (out): Linear(in_features=1024, out_features=2, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":50}],"source":["model.load_state_dict(torch.load('/content/drive/MyDrive/F3DENSENETADvsCNbest_metric_model_classification3d_dict.pth'))\n","model.eval()"]},{"cell_type":"code","execution_count":51,"metadata":{"id":"KW5rFKe3eOHg","executionInfo":{"status":"ok","timestamp":1650294297989,"user_tz":-240,"elapsed":88498,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}}},"outputs":[],"source":["y_true = list()\n","y_pred = list()\n","\n","with torch.no_grad():\n","    for test_data in test_loader:\n","        test_images, test_labels = test_data[\"img\"].to(device), test_data[\"label\"].to(device)\n","        pred = model(test_images.unsqueeze(1)).argmax(dim=1)\n","        y_true.append(test_labels.item())\n","        y_pred.append(pred.item())"]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","target_names = [\"CN\",\"AD\"]\n","print(classification_report(y_true, y_pred,target_names=target_names,digits=4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IlXe1SDHZO_L","executionInfo":{"status":"ok","timestamp":1650297469648,"user_tz":-240,"elapsed":321,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"c04e49a7-d3b8-4e52-e9bd-2e4ff30d8c71"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","          CN     0.9756    0.8889    0.9302        45\n","          AD     0.8980    0.9778    0.9362        45\n","\n","    accuracy                         0.9333        90\n","   macro avg     0.9368    0.9333    0.9332        90\n","weighted avg     0.9368    0.9333    0.9332        90\n","\n"]}]},{"cell_type":"code","source":["fpr, tpr, _ = roc_curve(y_true, y_pred)\n","roc_auc = roc_auc_score(y_true, y_pred)\n","\n","plt.figure(1)\n","plt.plot([0, 1], [0, 1])\n","plt.plot(fpr, tpr, label=\"(Densenet area = {:.3f})\".format(roc_auc))\n","plt.xlabel(\"False positive rate\")\n","plt.ylabel(\"True positive rate\")\n","plt.title(\"ROC curve\")\n","plt.legend(loc=\"best\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"8jfXesDgZSA1","executionInfo":{"status":"ok","timestamp":1650297481958,"user_tz":-240,"elapsed":439,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"f9c31de4-34a6-4d25-ad83-7b35bee41c16"},"execution_count":56,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","execution_count":54,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"_Abw0aPbosFy","executionInfo":{"status":"ok","timestamp":1650294298519,"user_tz":-240,"elapsed":68,"user":{"displayName":"Deevyankar Agarwal","userId":"14882055139397387561"}},"outputId":"e64b4782-07d3-46a7-bd51-f2ffb9651ff8"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["cmat = confusion_matrix(y_true, y_pred)\n","\n","import seaborn as sns\n","\n","ax = sns.heatmap(cmat, annot=True, cmap='Blues')\n","\n","ax.set_title('Confusion Matrix CN-45[Label 0],AD-45[Label 1] \\n\\n');\n","ax.set_xlabel('\\nPredicted Values')\n","ax.set_ylabel('Actual Values ');\n","\n","## Ticket labels - List must be in alphabetical order\n","ax.xaxis.set_ticklabels(['False','True'])\n","ax.yaxis.set_ticklabels(['False','True'])\n","\n","## Display the visualization of the Confusion Matrix.\n","plt.show()\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"machine_shape":"hm","name":"DenseNet Fold-3   AD vs CN","provenance":[{"file_id":"1wUU8oGY0A8oMGwZEpJiyjpDsIzVYuh4E","timestamp":1650280826743},{"file_id":"1jDGtnqGS8Aczg-zyZNGpF3QVKuynO6nf","timestamp":1650214828929},{"file_id":"1Uz9WP-CrrnkXZEy_tARR5eySNxhYP1UD","timestamp":1650167306214},{"file_id":"1yl08D9WJda9cSY1v3qJEwoqmjVzMGDVK","timestamp":1648382303992},{"file_id":"1W_VhzdsW0ev4YXUdlgWGQVc8FDui_-ti","timestamp":1648355843901},{"file_id":"1WwLS7IvoVpwP2K0cG9HF3BCfim5lWeE-","timestamp":1648347425085},{"file_id":"1aeCVSDGh-GOkorZ5Bl2btjFC2p_kK_k8","timestamp":1648314735073},{"file_id":"1BTjj-YH44tZrTF7rG6y4vREOqyiL3u5W","timestamp":1648302511310},{"file_id":"1jG_r7VUlaeHdfoqDiC5T--PwdnOGDpX7","timestamp":1648292499522},{"file_id":"15j8pYQmvG_UNAnP8JuGzfD8ex_6hxRns","timestamp":1648283104327},{"file_id":"1NE32ZVaen7rQzttzj3osZe7_nXN9QMOy","timestamp":1648201474639},{"file_id":"1TgopIX2tPaVjnXLqi3W4-d6UhVK8nPEJ","timestamp":1648127135930},{"file_id":"1-T7dnfNb8Ib2zGQgpjLivEO2VwMdetwr","timestamp":1648121625144},{"file_id":"1r1lUfWnsJxZnUUPhf_ThH0HE9YscvYcQ","timestamp":1648111248098},{"file_id":"1HYazkOl83bLXhAFo_z0e9UhhR7KIhCdV","timestamp":1648061718205},{"file_id":"10mbf3ronNevgSGamc8CjNo5VuCqaUpgz","timestamp":1648055036787},{"file_id":"1luKbRAAUC-f03yc4j610EoiAHppb68BS","timestamp":1648031793067},{"file_id":"1zP4rEG5G6l4zAqoJ_IZtldeR-Rf9vIAn","timestamp":1644428204089},{"file_id":"11yTaxC3PAGGBVoJ2ggBXxzwKfysLiMF3","timestamp":1644392976089},{"file_id":"1RWGGIVivPPJdbKNKUT_E241L8JQ5spxx","timestamp":1643956276368}],"mount_file_id":"1IhQ9HqIcPaurX0fHHwZzjNxj6hDQWAhp","authorship_tag":"ABX9TyOH4C57UDVMKx80bTY34V9o"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}